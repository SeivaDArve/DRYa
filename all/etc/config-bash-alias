#!bin/bash

# Title: config-bash-alias
# Description: Dv List of all alias and Functions (for Linux terminal)
# Use: This file is meant to be sourced from "~/Repositories/DRYa/all/source-all-drya-files"
# 
# Install this file
#   1. open ~/.bashrc
#   2. paste: "source ~/Repositories/DRYa/all/source-all-drya-files"

# Verbose file (variables and outputs)
   v_title="config-bash-alias"  # Name of this file
   echo "DRYa: File started loading: DRYa's $v_title" >> $v_MSGS
   echo "      > $v_title after internal software is loaded, I load the alias and extras" >> $v_MSGS


function f_cor1 { 
   tput setaf 5
}

function f_cor2 { 
   tput setaf 6 
}
function f_cor3 { 
   tput setaf 8 
}
function f_resetCor { 
   tput sgr0 
}


# Set the keybindings to vi/vim mode:
   #set -o vi

function E {
   select i in Nano Vim Emacs; do 
      case $i in 
         Nano)
	         if [ $i == "1" ]; then alias e="nano"; fi
         ;;
         Vim)
            if [ $i == "2" ]; then alias e="vim"; fi
         ;;
         Emacs)
            if [ $i == "3" ]; then alias e="emacs"; fi
         ;;
         *)
            echo lol
         ;;
      esac
   done
	
}

alias luxam="echo 'opening: grelhas-de-avaliacao.org' && echo ' > (alternative): F luxam' && cd ${v_REPOS_CENTER}/luxam/ && EM grelhas-de-avaliacao.org"

# DRYa-termux-omni-key (Bash keyboard bindings)
   # Bind F7 keycode: "\e[18~"
     v_default_omni_key="ॐ"
   
      # To print "Hi!" (just print)
         #bind '"\e[18~":"Hi!"'

      # To exec 'man cat' 
         #bind -x '"\e[18~":"man cat"'

      # To exec 'upk' 
         function f-set-omni-key-upk {
            cp ${v_REPOS_CENTER}/DRYa/all/etc/dot-files/termux/termux.properties ~/.termux
            sed -i "s/ॐ/⏚/g" ~/.termux/termux.properties
            bind -x '"\e[18~":"upk"'
            termux-reload-settings
         }

      # To exec 'luxam' 
         function f-set-omni-key-luxam {
            cp ${v_REPOS_CENTER}/DRYa/all/etc/dot-files/termux/termux.properties ~/.termux
            sed -i "s/ॐ/✡/g" ~/.termux/termux.properties
            bind -x '"\e[18~":"luxam"'
            termux-reload-settings
         }

      # To open/exec the Android App: "Leitor QR"
         function f-set-omni-key-qr {
            cp ${v_REPOS_CENTER}/DRYa/all/etc/dot-files/termux/termux.properties ~/.termux
            sed -i "s/ॐ/⎆/g" ~/.termux/termux.properties
            bind -x '"\e[18~":"am start --user 0 -a andrppoid.intent.action.MAIN -n com.teacapps.barcodescanner/net.qrbot.ui.main.MainActivity"'
            termux-reload-settings
         }
      
      #bind -x '"\e[18~":"f-set-omni-key-qr"'

      # Reset omni-key {
         function f-reset-omni-key {
            cp ${v_REPOS_CENTER}/DRYa/all/etc/dot-files/termux/termux.properties ~/.termux
            #sed -i "s/⎆/ॐ/g" ~/.termux/termux.properties  ## Se o ficheiro em .../etc/dot-files/... for copiado diretamente para ~/.termux/termux.properties entao nao é preciso 'sed'
            termux-reload-settings 2>/dev/null ## Won't work on WSL2
            bind -x '"\e[18~": f_my_reset_test'

         }
         #f-reset-omni-key  ## Esta Fx faz reset durante o startup do terminal por engano






####################################
# Bug fix to STDIN on interactive drya-omni-key using Bash 'bind -x'
# source: https://stackoverflow.com/questions/65465973/bind-interactive-command-to-a-key-sequence

stty_orig=$(stty -g)

function f_my_reset_test {
  local stty_bkup=$(stty -g)
  stty "$stty_orig"

  # Function WE want to run here:
     key

  stty "$stty_bkup"
}

bind -x '"\e[18~": f_my_reset_test'


#####################################











function key {
   # Menu para alternar drya-termux-omni-key icon e funcionalidade
   #
   # Bug: Quando em bash é usado o "F7 bind -x to key" entao encrava as funcoes bash que tiverem 'read -p "resposta? " v_ans'
   clear
   figlet Omni Key
   echo "Opcoes para Omni-Key:"
   echo " Escreve Num ou Texto em minusculas"
   echo " > (1) OM"
   echo " > (2) UPK"
   echo " > (3) QR"
   echo " > (4) Luxam"
   #echo " > Reset (leave empty)"

   read -p "Qual a funcao que quer para omni-key? " v_ans

   if   [ $v_ans == "om"  ] || [ $v_ans == "1" ]; then f-reset-omni-key
   elif [ $v_ans == "upk" ] || [ $v_ans == "2" ]; then f-set-omni-key-upk
   elif [ $v_ans == "qr"  ] || [ $v_ans == "3" ]; then f-set-omni-key-qr
   elif [ $v_ans == "luxam"  ] || [ $v_ans == "4" ]; then f-set-omni-key-luxam
   fi

}

function siigo {
   # Finding a proper browser to open siigo.com

   function f_termux_siigo {
      # Using termux 
      termux-open-url https://siigo-maintenance.com/#/calendar 2>/dev/null
   }
   
   function f_chrome_siigo {
      # Using chrome   
      "/mnt/c/Program Files/Google/Chrome/Application/chrome.exe" https://siigo-maintenance.com/#/calendar 2>/dev/null
   }

   # Calling siigo webpage using one of the above options:
      f_chrome_siigo || f_termux_siigo || echo "DRYa: could not open siigo"
      
}

function web {
   # Simply opening a browser

   function f_termux {
      # Using Termux
      termux-open-url https://duckduckgo.com 2>/dev/null
   }
   
   function f_chrome {
      # Using chrome on windows 
      "/mnt/c/Program Files/Google/Chrome/Application/chrome.exe" https://duckduckgo.com 2>/dev/null
   }

   # Calling siigo webpage using one of the above options:
      f_termux || f_chrome || echo "DRYa: could not open a browser"
      
}


# Telling bash not to save command line on history log file that have either a whit space befor it ou that the previous line is duplicate
   # More info at: '$ man bash'
   HISTCONTROL=ignoreboth

alias appdata="udev: must be completed"

# Termux alias
   alias REC="termux-microphone-record -l 0"
   alias rec="termux-microphone-record -d && clear && echo 'Going'" # Starts voice recording (There should be a fast dial for this option)
      alias a="termux-microphone-record -d" # Starts voice recording (There should be a fast dial for this option)

   alias cer="termux-microphone-record -q" # Stops voice recording (There should be a fast dial for this option)
      alias b="termux-microphone-record -q" # Stops voice recording (There should be a fast dial for this option)
      alias recs="termux-microphone-record -q" # Stops voice recording (There should be a fast dial for this option)
      
   alias paste="termux-clipboard-get"
   alias sms="termux-sms-send -n" 

# Termux sms script
   function sms {
      case $1 in
         send)
            v_1="-n $2"
            v_2=$3
            echo "termux-sms-.. $v_1 $v_2" 
         ;;
         in)
         ;;
         out)
         ;;
         *)
         ;;
      esac
}


alias grep="grep --color=auto"

function bt {
   # See battery status
   
   if [ $(uname -o) == "Android" ]; then
      termux-battery-status
   else
      case $1 in 
         -a) upower -i `upower -e | grep 'BAT'` ;;
         -p) echo -n "Battery percentage = " && cat /sys/class/power_supply/BAT0/capacity ;;
         *) upower -i $(upower -e | grep BAT) | grep --color=never -E "state|to\ full|to\ empty|percentage" 
         ;;
      esac
   fi
}

function dos-2-unix {
   clear
   figlet "DRYa: DOS to Unix"
   echo "DRYa: convert a DOS file into Unix"

   ## When editing a file with emacs, it got windows new-line formatation \r and vim was not detecting it. So, when running the file that was actually a .sh script it gave the error "bash line 2: $'\r': command not found" Now, we can either run the command "sed -i 's/\r$//' scriptname.sh" or we can install dos2unix and run "dos2unix scriptname.sh". DRYa will hava a script to correct it also called 'dos-2-unix' by the reason I want to know what is being done by all my scripts

   # uDev: Adicionar explicaco disto tambem na wikiD

   echo 
   echo "It will remove a bug when bash attempts to source a file"
   echo "error message: (uDev)"
   echo "explanation: (uDev)"
   echo 
   echo "Feed me a name (or path name) of a file to correct"
   echo " > (uDev)"
   #"sed -i 's/\r$//' scriptname.sh"
}
   

alias irc="irssi" # An IRC client :: Install it with: pkg install irssi

#alias wiki="EM ${v_REPOS_CENTER}/wikiD/wikiD"
alias wiki="EM -nw /mnt/c/wsl-dv/Repositories/wikiD/wikiD"

function f_debug {
   # Degug function: use it when you need to re-open this file over and over again for debug.
	read
	vim ${v_REPOS_CENTER}/DRYa/all/config-bash-alias
	#pkill -9 -x ~/Repositories/DRYa/all/config-bash-alias
}

function f_drya-messages {
   # All Seiva's software (including DRYa)
      # will have at the start of the file,
      # a line that
      # will tell ~/.tmp/drya-messages.txt
      # that that specific file was read.
      # This is for debugging process.
      # You can add a line to ~/.bashrc to delete
      # ~/.tmp/ everytime you open the terminal
      # and that way, everything is refreshed everytime

      alias drya-messages="less ~/.tmp/drya-messages.txt" #uDev: change to .dryarc  ## uDev: to be sent to drya.sh
}

# joke:
   alias research="tree /;tree /;tree /;tree /;tree /;tree /;tree /;tree /;tree /;tree /;tree /;tree /;tree /";

alias ls="ls -p"
alias la="ls -pA"
alias ll="ls -pl"
#alias lll= pwd + file paths (uDev)
alias lh="du -ah" # Lists all file's size
alias mk="mkdir" # Creates one directory for each name given as an argument and in case that succeeds, changes working directory for the directory given as the first argument
alias d="cd"
alias dcim='cd ~/storage/dcim/Camera || echo " \> You are trying to navige to a dir usually present on Android using Termux"'
alias lixo="mkdir -p ~/trash/; mv $@ ~/trash/"

# 'Calc' and 'bc' are 2 Bash calculators
# 'split -n 5' is a command that splits a text file into 5 parts

# Media tools:
   alias miau="termux-open-url https://www.instagram.com/reel/CinlDmBO0tO/?igshid=YmMyMTA2M2Y="
   alias preta="termux-open-url https://www.instagram.com/reel/Cnol075KSIU/?igshid=YmMyMTA2M2Y="
   alias vibrato="termux-open-url https://www.youtube.com/watch?v=OLfwxzY-l7o"

function op {
   # Function to open all files and directories given as arguments ($*)
      # Similar apps: termux-open; termux-open-url; wslview

   # uDev: Since DRYa is developing drya-neofetch, then in the future we will get our OS from an environment variable made by DRYa

   # Test in which OS this script is running:
      v_uname=$(uname -a)

   # Try to find the file opener at each OS:
      if [[ $v_uname =~ "Microsoft" ]]; then 
         # Test if this script is a Linux OS running inside windows (WSL (Windows sub-system for Linux):
            /mnt/c/windows/explorer.exe $*

      elif [[ $v_uname =~ "Android" ]]; then
         # If it finds "Android" then it should be working at Termux terminal
            xdg-open $*

      elif [[ $v_uname =~ "Linux" ]]; then
         # If it is Any kind of Linux, try to open as standard
            xdg-open $*
      else
         echo "DRYa: op: Attempt to open that argument failed"
      fi
      
      # uDev: Add 'termux-open $* --chooser' as an option
}


# Ask the terminal to print the stroken
   alias stroken="cat ${v_REPOS_CENTER}/DRYa/all/etc/dot-files/git-github/current-stroken"
   # Notes:
      # At ${v_REPOS_CENTER}/DRYa/all/install.uninstall/stroken there is a copy of this file but with kore info to help new app users
      # We can install stroken automatically with: '$ drya install stroken'

# Fast dial:
   # uDev: for WSL2, shutdown and reboot must be done by batch scripts
   alias 2468="exit"
   alias 24685="shutdown now"
   alias 246854="shutdown -r now"
   alias 48256="termux-microphone-record -d 1>/dev/null" # Starts voice recording without any terminal output
   alias "48256."="termux-microphone-record -q 1>/dev/null" # Stops voice recording without any terminal output
   alias 453="upk"
   alias reboot="shutdown -r now"

alias website="termux-open-url https://seiva.yolasite.com/ 2>/dev/null || op https://seiva.yolasite.com/"

alias all="cd all; ls"

function notify {
   # Criar notificacoes via termux
   clear
   figlet "DRYa Notify"
   echo "Notify: Create an Android notification message"

   # Creating an history file
      # uDev: enviar antes para omni-log repo
      v_dir=~/.config/h.h/drya/tmp/
      v_file="termux-notify-output.txt"
      mkdir -p $v_dir
      v_file2=${v_dir}${v_file}
            
   # Create an ID for each notification created
      function f_create_id {
         # It will be a concat of year + month + day + hour + Min + Sec
         # It will be a concat of  %Y  +  %m   +  %d +  %k  +  %M +  %S
         v_date=$(date +%Y%m%d%k%M%S)
         v_id=$v_date
      }

   # Add a line to history file
      function f_create_hist {
            echo "$(date) > $v_ans" >> ${v_dir}${v_file}
      }

   # Create the message itself
      function f_notify_create {
         termux-notification -t "DRYa: Notify:" -c "$v_ans" -i "$v_id" --icon circle_notifications --image-path /data/data/com.termux/files/home/Repositories/DRYa/all/etc/dot-files/termux/termux-icon.png && echo "Sucess!"
      }

   # Input a message
      function f_notify_message {
         echo
         echo "What is your message? "
         read -p " > " v_ans

         f_create_id
         f_notify_create
         f_create_hist
      }

   # Echo notification ID number
      function f_change_id {
         echo
         echo "Id for this notification will be: "
         echo " > $v_id"
      }

   # No arg:
      if [[ -z $1 ]]; then
         f_change_id
         f_notify_message

   # If arg -i is given to '$ notify' then, add the change to alter the ID
      elif [[ $1 == "-i" ]]; then
         f_change_id
         echo
         echo " >> What is your custom notification ID?"
         echo "     (will overwrite any notification with same ID)"
         read -p "     > " v_id
         echo
         f_change_id
         f_notify_message

   # List all DRYa messages (only DRYa)
      elif [[ $1 == "-l" ]]; then
         termux-notification-list | grep -B 2 -A 7 "tag"

   # For each line in 'notify' history file, notify it again. (If you dont want the same history file to come up, delete such line)
      elif [[ $1 == "again" ]]; then

         echo

         while read i; do
            v_ans=$(echo "$i" | cut -d ">" -f 2 | sed "s/ //")
            echo $v_ans
            f_create_id
            f_notify_create
         done < $v_file2
         
   # Edit the history file
      elif [[ $1 == "hist" ]]; then
         vim $v_file2
         
      elif [[ $1 == "-h" ]]; then
         echo
         echo "Manipulate ID: "
         echo " > notify -i"

      elif [[ $1 == "-v" ]]; then
         less ${v_dir}${v_file}
      fi
      
     
}
alias nt="notify"

function nfc {
   # Read and write NFC on termux
      clear
      figlet NFC
      echo "DRYa: Ler NFC (short)"

      # Creating a file to hold nfc content temporarily
         v_nfc=~/.tmp/termux-nfc-tmp-text
         mkdir -p ~/.tmp
         touch $v_nfc

      # Example sound
         v_sound=~/Repositories/DRYa/all/etc/example-sound.wav

      termux-nfc -r short > $v_nfc

      echo
      echo -n "NFC lido: "

      #read -p "Press Enter AFTER reading"

      v_nfc_text=$(grep "Payload" $v_nfc )

      if [[ $v_nfc_text =~ "nfc-base1" ]]; then
         echo "Base 1"

         termux-wake-lock

         v_secs=$((60 * 60))
         while [ $v_secs -gt 0 ]; do
            echo -ne "\r$v_secs"
            sleep 1
            : $((v_secs--))
         done

         echo
         termux-media-player play $v_sound 1>/dev/null
         termux-wake-unlock

      elif [[ $v_nfc_text =~ "nfc-MLavar1-start" ]]; then
         echo "Maquina de lavar: Inicio"

         for i in {1..60};
         do
            echo $i
            sleep 1
         done

      elif [[ $v_nfc_text =~ "nfc-MLavar1-end" ]]; then
         echo "Maquina de lavar: Fim"

      else
         echo $v_nfc_text
      fi
}

function ouvir {
   # Cria um while loop infinito por exemplo no smartphone Indratena que ouve updates no github, baixa, instala, executa
   # Usará um ficheiro em omni-log
   # uDev: Criar na wikiD um header que informa todos os sitios onde a DRYa mexe com o github
   echo "DRYa: Listener: uDev"
}

function falar {
   # uDev: Cria uma notificacao noutro Android, via um ficheiro omni-log
   echo "DRYa: Speaker: uDev"
}


alias  play="termux-media-player play"
alias pause="termux-media-player pause"
alias  stop="termux-media-player stop"
alias  info="termux-media-player info"
alias sound="termux-media-player play ${v_REPOS_CENTER}/DRYa/all/etc/example-sound.wav" ## example sound

alias tufnar="echo '# uDev: Tufnar Isaura 91... Check a phone list on omni-log" 


function shebang {
   # It creates a bash script (if no args are input)
      # Or gives a shebang to the file you input as argument 1)
      # It also changes the permissions of tbe file to executable

   function f_inform_creation_noArgs {
      # Informing the user that the process is ready
      
      # Using command 'ls' to test existence
         ls $v_ans 1>/dev/null # Delete all output
         if [[ $? == 0 ]]; then # If last '$ ls' command was sucessfull, then:

            tput setaf 3
               echo -n " > File "
            tput setaf 4
               echo -n $v_ans
            tput setaf 3
               echo " created!"
            tput sgr0

            read -s -n 1
            vim $v_ans
         else 
            echo File not created
         fi
   }

   function f_inform_creation {
      # Informing the user that the process is ready

      
      # Using command 'ls' to test existence
         ls $i 1>/dev/null # Delete all output
         if [[ $? == 0 ]]; then

            tput setaf 3
               echo -n " > File "
            tput setaf 4
               echo -n $i
            tput setaf 3
               echo " created!"
            tput sgr0
         else 
            echo File not created
         fi
   }

   function f_test_existence_noArgs {
      # Test existence of file named as argument given

      if [[ -f $v_ans ]]; then
         # Test if file exists to avoid overwriting it
         echo -n "File "
         tput setaf 4
         echo -n "$v_ans "
         tput sgr0
         echo "already exists, please choose another name"
      else 
         # If file does not exist, run:
         touch $v_ans
         echo "#!/bin/bash" > ./${v_ans}
         chmod +x ./${v_ans}

         f_inform_creation_noArgs
         vim $v_ans

      fi
   }

   function f_test_existence {
      # Test existence of file named as argument given

      if [[ -f $i ]]; then
         # Test if file exists to avoid overwriting it
         echo -n "File "
         tput setaf 4
         echo -n "$i "
         tput sgr0
         echo "already exists, please choose another name"
      else 
         # If file does not exist, run:
         touch $i
         echo "#!/bin/bash" > ./${i}
         chmod +x ./${i}
         
         f_inform_creation 

      fi
   }

   if [[ -z $1 ]]; then
      # If no arg is given
         echo -n " > File name? "
         read v_ans

         f_test_existence_noArgs

   else 
      # If there are arguments, test each one for exuatence:
         for i in $@; do 
            f_test_existence
         done
   fi
}


function go {
	# This function opens applications apart from the terminal. It means that you can close the terminal after the aplications launch and the terminal being killed does not kill the apps it created
	for v_arg in $@
	do
		setsid $v_arg &>/dev/null
	done

      # Detecting if any of the arguments given has the word "terminal" to replace for "gnome-terminal"
      if [[ $@ =~ "terminal" ]]; then setsid gnome-terminal &>/dev/null; fi


      # Detect if LAST argument is "bye" to make the current terminal "exit"
         # Store all arguments inside a variable
         v_allArguments=$*
         
         # Using awk to detect only the last argument
         v_lastArg=$(echo $v_allArguments | awk '{ print $NF }')
         if [ ${v_lastArg} == "bye" ]; then 
            #echo "bye was said. Press enter to exit"    #Exit message
            #read                                        #Pause before exit
            exit
         fi

      # If there is an app called "bye" that you want to open with the command "go" then just put something else in from of it to prevent "exit" command to happen
         # Use: $ go bye ...

      # If you simply want to restart the terminal
         if [ $1 == "again" ]; then gnome-terminal && exit; fi

   # If you want to export just this "go" script for an entire repository, the name sugested is: bash-open-app-at-external-window
}

# This command is same as: "source ~/.bashrc" (but needs the function: go)
alias src="go gnome-terminal; exit"


alias ,="cd"
alias ,,="clear; tput cnorm" # Also resets the blinking cursor if it was hidden
alias ,,,=", ; ,," # Same as both 2 previous commands put together
alias .,="ls -Ap" # uDev: This is meant also to SEE if the directory is empty or not, therefore, if the dir is Totally empty, echo "This place is empty"
alias CLEAR="cd; clear; figlet 'Clear'; tput cnorm" # Also resets the blinking cursor if it was hidden

function f_emacs {
   # Attempt to untangle emacs alias (due to so many versions)
   
   alias em="emacs"
   alias Em="/mnt/c/Program\ Files/Emacs/x86_64/bin/emacs.exe" # Opens emacs GUI on windows OS
   alias Emacs="/mnt/c/Program\ Files/Emacs/x86_64/bin/emacs.exe" # Opens emacs GUI on windows OS

   # Decide for alias EM which emacs corresponds best with the System
      if [ -f /mnt/c/Program\ Files/Emacs/x86_64/bin/emacs.exe ]; then 
         # If emacs GUI exists (on windows), then
         alias EM="/mnt/c/Program\ Files/Emacs/x86_64/bin/emacs.exe" 

      else 
         ## If emacs GUI does not exist, then set it for terminal emacs
         alias EM="emacs"
      fi
}
f_emacs

alias a="cd all && ls"
alias hi="hello!"

# uDev: to put under menuFAV F
alias hind="vim ${v_REPOS_CENTER}/yogaBashApp/all/about-hinduism/about-hinduism.txt"


# Pandoc app to create man pages


alias R='echo "List Repositories by number and jumpt to them. uDev: Not available yet"'

# Acessing emacs-wiki.org
alias emacs-wiki="emacs ${v_REPOS_CENTER}/dWiki/emacs/gnu-emacs/emacs-wiki.org" #Add message "file: ~/Repos.../x.../y.../z... was opened" >> ~/.tmp/messages.txt

# Acessing emacs init.el file
   alias emacs-init="emacs ~/.emacs.d/init.el"

# Using Num Pad numbers as shortcuts
   function win-hibernate {
      cd ${v_REPOS_CENTER}/DRYa/all/batch/shut-restart-hibernate-sleep/ && \
      /mnt/c/Windows/System32/cmd.exe /c hibernar.lnk
   }

   alias exe="/mnt/c/Windows/System32/cmd.exe /c"
   alias 2468="exit"
   alias 24685="shutdown now"
   alias 246854="shutdown -r now"
   alias 246856="echo 'From Linux, command Windows: Hibernete'; win-hibernate 2>/dev/null|| echo ' > This command is for Windows only'"



alias bashrc="vim ~/.bashrc"
alias vimrc="vim ~/.vimrc"



function hist {
   # history-recall sub-app
   mkdir -p ~/.tmp/
   history > ~/.tmp/fileA.txt
   history

   echo -e "\n > Type Ctrl+C to cancel \n > Type a number to navigate: "
   echo -n " > "
   read v_ans

   #echo "grep results:"

   grep "$v_ans" ~/.tmp/fileA.txt > ~/.tmp/fileB.txt

   # Remove 2 character to the begining of the text
   sed -i 's/^..//g' ~/.tmp/fileB.txt

   # Debugging process
   #echo "Sed results:"
   #echo "cat fileB"
   #cat ~/.tmp/fileB.txt

   # Search patter of the beggining of the line
   grep ^$v_ans ~/.tmp/fileB.txt > ~/.tmp/fileA.txt

   # Debugging process
   #echo "cat fileA"
   #cat ~/.tmp/fileA.txt
   sed -i 's/^\w*\ *//' ~/.tmp/fileA.txt

   # Now, cutting the command
   cut -d ' ' -f2- ~/.tmp/fileA.txt

   # Debugging process
   #echo "fileA after cut"
   #cat ~/.tmp/fileA.txt
   #echo "trying to eval:"
   #read

   # Creating a variable called v_eval to store the content of the file as text
   v_eval=$(cat ~/.tmp/fileA.txt)

   # Trying to run the text of the file. If it the shell has executables that are called the same way as this txt is written, then run this text at the terminal as if it was written to trigger an executable
   eval $v_eval
}




# Temporary script to map audio chapters in a file currently being studied
   alias eoc="echo 'end of chapter, right?'; echo >> ~/eof; info 1>>~/eoc"

# Bash fork bomb
   # Link tutorial: https://youtu.be/wIsGXkxXZzE
   alias start-fork-bomb=":() { :|: & };:"

# Verbose file (variables and outputs)
   echo "DRYa: File ended loading: DRYa's $v_title" >> $v_MSGS
