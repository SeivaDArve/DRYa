#!/bin/bash

# Title: Dv List of all alias and Functions (for Linux terminal)
# Name of File: config-bash-alias
# Use: This file is meant to be sourced from "~/Repositories/DRYa/all/source-all-drya-files"
# Version: beta
#
echo "File being read: config-bash-alias" ## File Description
figlet Dv ## Figlet Title
#

# Install this file
# 1. open ~/.bashrc
# 2. paste: "source ~/Repositories/DRYa/all/source-all-drya-files"

neofetch

# See battery status:
function bt {
case $1 in 
	-a) upower -i `upower -e | grep 'BAT'` ;;
	-p) echo -n "Battery percentage = " && cat /sys/class/power_supply/BAT0/capacity ;;
	*) upower -i $(upower -e | grep BAT) | grep --color=never -E "state|to\ full|to\ empty|percentage" 
	;;
esac
}

# Degug function: use it when you need to re-open this file over and over again for debug.
function f_debug {
	read
	vim ~/Repositories/DRYa/all/config-bash-alias
	#pkill -9 -x ~/Repositories/DRYa/all/config-bash-alias
}

# joke:
alias research="tree /;tree /;tree /;tree /;tree /;tree /;tree /;tree /;tree /;tree /;tree /;tree /;tree /";

alias op="xdg-open"
#alias mkdir="mkdir ...; "add .gitkeep to it? (use xargs)"
alias la="ls -A"
alias ll="ls -l"
#alias cl="cd ; ls "

# This command is same as: "source ~/.bashrc" (but needs the function: go)
alias src="go gnome-terminal; exit"

alias 24685="shutdown now"
alias 246854="shutdown -r now"

function go {
	# This function opens applications apart from the terminal. It means that you can close the terminal after the aplications launch and the terminal being killed does not kill the apps it created
	for v_arg in $@
	do
		setsid $v_arg &>/dev/null
	done
}

# function ls {
# case !$ in 
#	l) 
		#It means "ls l" insteas of ls -l
#	;;
#	a) 
		#It means "ls a" insteas of ls -a
#	;;
#	*)
#	;;
# esac

alias .="ls"
alias ..="cd .."
alias ,="cd"
alias ,,="clear"
alias ,,,="cd -"

# Acessing omni-log-Dv files
alias v-omni="vim ~/Repositories/omni-log-Dv/multiplex.org"
alias e-omni="emacs ~/Repositories/omni-log-Dv/multiplex.org"
alias omni="emacs ~/Repositories/omni-log-Dv/multiplex.org"
alias omni-n-push-n-exit="vim ~/Repositories/omni-log-Dv/multiplex.org; echo 'git add -A + git push (will be added soon)'; exit"
alias test="tree /; exit 0"

alias R='echo "List Repositories by number and jumpt to them. uDev: Not available yet"'

# Acessing emacs-wiki.org
alias emacs-wiki="emacs ~/Repositories/dWiki/emacs/gnu-emacs/emacs-wiki.org" #Add message "file: ~/Repos.../x.../y.../z... was opened" >> ~/tmp/messages.txt

# Acessing emacs init.el file
alias emacs-init="emacs ~/.emacs.d/init.el"

# Using Num Pad numbers as shortcuts
alias 2468="exit"
alias 24685="shutdown now"
alias 246854="shutdown -r now"

# Edit dotFiles
function ., {
	clear
	echo "Change the alias ., to adit:"
	echo ""
	echo "1 - Edit \".bashrc\""
	echo "2 - Edit \".vimrc\""
	echo "3 - Edit \".dryarc\""
	echo "4 - Edit \"config-bash-alias\" from DRYa"
	read v_ans
	
	alias bashrc="vim ~/.bashrc"
	alias vimrc="vim ~/.vimrc"

}

# Multiple ways to edit this file # PERMANENT CHANGES if "git push" is used
	alias update-alias="cd ~/Repositories/DRYa/all/ && vim config-bash-alias"
	alias ,.="vim ~/Repositories/DRYa/all/etc/config-bash-alias"

#function ... {
#	clear
#	echo -e "Do you need any of these apps?\n"
#	echo " 1. history-manager"
#	echo " 2. do nothing"
#	read v_ans
#	case 1 in $v_ans
#}

# historyi-recall app
	function ... {
		mkdir -p ~/tmp
		history > ~/tmp/fileA.txt
		history

		echo -e "\n > Type Ctrl+C to cancel \n > Type a number to navigate: "
		echo -n " > "
		read v_ans

		#echo "grep results:"

		grep "$v_ans" ~/tmp/fileA.txt > ~/tmp/fileB.txt

		# Remove 2 character to the begining of the text
		sed -i 's/^..//g' ~/tmp/fileB.txt

		# Debugging process
		#echo "Sed results:"
		#echo "cat fileB"
		#cat ~/tmp/fileB.txt

		# Search patter of the beggining of the line
		grep ^$v_ans ~/tmp/fileB.txt > ~/tmp/fileA.txt

		# Debugging process
		#echo "cat fileA"
		#cat ~/tmp/fileA.txt
		sed -i 's/^\w*\ *//' ~/tmp/fileA.txt

		# Now, cutting the command
		cut -d ' ' -f2- ~/tmp/fileA.txt
		
		# Debugging process
		#echo "fileA after cut"
		#cat ~/tmp/fileA.txt
		#echo "trying to eval:"
		#read

		# Creating a variable called v_eval to store the content of the file as text
		v_eval=$(cat ~/tmp/fileA.txt)

		# Trying to run the text of the file. If it the shell has executables that are called the same way as this txt is written, then run this text at the terminal as if it was written to trigger an executable
		eval $v_eval
	}

# Alias morse-code-style
# Dot="."
# Dash=","
# word="..., ,.., .,,"
# alias .,

# To load upk Repo at .bashrc with .dryarc:
#cat upk.sh then search only for a function of greetings, then echo that out

alias drya="bash ~/Repositories/DRYa/drya.sh"
alias drya-catMe-tmp="cat ~/.config/h.h/.dryarc "
alias drya-editMe-permanently="vim ~/Repositories/DRYa/all/config-bash-alias"
alias drya-editMe-temporarily="vim ~/Repositories/DRYa/install.uninstall/drya.installer/future-dryarc"
#alias drya-updateMe-locally="cat ~/.config/h.h/.dryarc >> ~/Repositories/DRYa/all/config-bash-alias && rm ~/.config/h.h/drya/.dryarc && creat .dryarc(with contents)" # This line copies temporary settings from users of drya and appends it to the directory where drya is installed and running. This way, if you push it to github, it will be permanent
alias drya-updateMe-globally="echo 'ezGIT must be installed'"
#alias drya-make-dryarc # uDev: function exists inside drya.sh

alias ..="cd .."
alias hi="echo hello"

alias sourceAll="source ~/.bashrc"
alias v="echo sk"

# Source all other repos if they exist:
# Source jarve
# Source upK
# Source ezGIT
# Source ... 


function drya {
   PS3="Select the operation: "
   select opt in Configurations installations edit-files quit
   do
      case $opt in
         Configurations)
            read -p "Enter the first number: " n1
            read -p "Enter the second number: " n2
            echo "$n1 + $n2 = $(($n1+$n2))"
            ;;
         installations)
            read -p "Enter the first number: " n1
            read -p "Enter the second number: " n2
            echo "$n1 - $n2 = $(($n1-$n2))"
            ;;
         edit-files)
            read -p "Enter the first number: " n1
            read -p "Enter the second number: " n2
            echo "$n1 * $n2 = $(($n1*$n2))"
            ;;
         quit)
            break
            ;;
         *)
            echo "Invalid option $REPLY"
            ;;
      esac
      # It works as a while loop too
   done
}


