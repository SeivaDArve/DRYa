#!bin/bash
# Title: config-bash-alias
# Description: Dv List of all alias and Functions (for Linux terminal)
# Use: This file is meant to be sourced from "~/Repositories/DRYa/all/source-all-drya-files"

# Verbose file (variables and outputs)
   v_title="config-bash-alias"  # Name of this file
   echo "DRYa: File started loading: DRYa's $v_title" >> $v_MSGS
   echo "      > $v_title after internal software is loaded, I load the alias and extras" >> $v_MSGS


function f_cor1 { 
   tput setaf 5
}

function f_cor2 { 
   tput setaf 6 
}
function f_cor3 { 
   tput setaf 8 
}
function f_resetCor { 
   tput sgr0 
}


# Set the keybindings to vi/vim mode:
   #set -o vi


# uDev: fx para verificar se existem novos bookmark no browser

alias foto="am start -a android.media.action.IMAGE_CAPTURE"

alias start-termux-gui="vncserver -localhost :1"  # Inicia o servidor VNC no ecra :1
alias stop-termux-gui="vncserver -kill :1"  # Inicia o servidor VNC no ecra :1

alias timg="termimage"

alias notes="bash ${v_REPOS_CENTER}/DRYa/all/bin/no-tes.sh"
alias  note="bash ${v_REPOS_CENTER}/DRYa/all/bin/no-tes.sh"
alias    no="bash ${v_REPOS_CENTER}/DRYa/all/bin/no-tes.sh"

alias inventar-notas="bash /home/indratena/Repositories/scratch-paper/shuf"  # temporary alias

alias xdg=xdg-open

alias hh="cd ~/.config/h.h"

function wsl {
   # fx that uses `cd` to navigate to windows directories (when using WSL2)

   if [ -z $2 ]; then
      cd /mnt/c/

   elif [ $2 == "." ]; then
      cd /mnt/$3
   fi
}


function f_fzf_raw_link_opener {

   # Navegar para a pasta que contem o backup de bookmarks e também o script que filtra esses bookmarks
      cd ${v_REPOS_CENTER}/omni-log/all/browser-bookmarks/
      bash ${v_REPOS_CENTER}/omni-log/all/browser-bookmarks/raw-link-opener.sh
      cd -
   
   # Como o script anterior já vai abrir o link que encontrar no browser, entao neste script informamos às proximas fx que nao haverá URL  
}

function web {
   # dee: T: `web`  ::  D: Fx que abre websites corretamente de acordo com o dispositivo/maquina atual  #HashTag:987657897
   # Simply opening a browser (args may be given)
   # Note: after this fx, some shortcuts will be created also
   
   # uDev: Usar metodo de desconectar o precesso por completo do terminal atual
   # uDev: Filtrar os "browser-bookmarks" e fornecer uma opcao para isso

   # Homepage pre-definida
      homePage_name="Duckduckgo.com"
      homePage="https://$homePage_name"

   # Reset à variavel
      unset v_URL

   # Identificar os argumentos que se enviam para esta fx
      if [ -z $1 ]; then 
         # Se nao for dado nenhum argumento, dar o menu: 
   
         # Lista de opcoes

            #L8='8. Saber qual é o browser pre-definido'  # `xdg-settings get default-web-browser`
            #L7="7. Online Terminal"  # https://www.terminaltemple.com/
            #L7="Pagina do historico Google

            L6="6. Ir | Router Config Page"

            L5="5. Ir | Google.com"
            L4="4. Ir | $homePage_name"
            L3='3. Ir | Seiva Website'

            L2='2. Abrir | Bookmarks Guardados '
            L1='1. Cancel'

         v_ask=$(echo -e "$L1 \n$L2 \n\n$L3 \n$L4 \n$L5 \n\n$L6" | fzf --cycle --prompt="SELECT: como quer aceder à Web: ")

         [[ $v_ask =~ "6. " ]] && v_URL="firefox http://192.168.1.1"  # 192.168.0.1 ou 192.168.1.1
         [[ $v_ask =~ "5. " ]] && v_URL="https://google.com"
         [[ $v_ask =~ "4. " ]] && v_URL="https://duckduckgo.com"
         [[ $v_ask =~ "3. " ]] && v_URL="https://seiva.yolasite.com"
         [[ $v_ask =~ "2. " ]] && f_fzf_raw_link_opener 
         [[ $v_ask =~ "1. " ]] && echo "Canceled"
         
      elif [ $1 == "." ]; then 
         unset v_URL
         v_URL="https://seiva.yolasite.com"
         
      elif [ $1 == "siigo" ]; then 
         v_URL="https://siigo-maintenance.com/#/calendar"

      elif [ $1 == "gpt" ]; then 
         v_URL="https://chatgpt.com/?oai-dm=1"

      elif [ $1 == "duck" ]; then 
         v_URL="https://duckduckgo.com"
         
      elif [ $1 == "lojas" ]; then 
         v_URL="https://www.cascaishopping.pt/mapa/#/location/639a8d573b88061336d69a59"

      elif [ $1 == "yt" ]; then 
         v_URL="https://www.youtube.com"

      elif [ $1 == "bm" ]; then 
         f_fzf_raw_link_opener

      else
         echo "DRYa: web: Tem de inserir um link valido"
         #echo " > Vamos tentar abrir o texto introduzido "
         #v_URL=$1

      fi

   # Send file 'nohup.out' to a tmp dir
      mkdir -p ~/.tmp


   # Identificar a maquina atual
      if [[ -z $v_URL ]]; then
         echo "Link Aberto pelo script: raw-link-opener.sh" 1>/dev/null

      elif [[ $traits_OS == "Android" ]]; then     # When using Termux
         echo "DRYa: A abrir com Termux: "
         echo " > $v_URL"

         cd ~/.tmp

         #termux-open-url "$v_URL" &
         nohup termux-open-url "$v_URL" & disown
         cd -
      
      elif [[ $traits_OS == "Linux" ]]; then      # When using Linux 
         echo "DRYa: A abrir com Linux: $v_URL"
         xdg-open $v_URL & 

      elif [[ $traits_OS == "Windows" ]]; then    # Maybe using windows 
         echo "DRYa: A abrir com Windows: $v_URL"
         "/mnt/c/Program Files/Google/Chrome/Application/chrome.exe" "$v_URL" &

      else
         echo "DRYa: Erro a abrir o link"
      
      fi

      
}

# Shortcuts for fx `web`
   # dee: HashTag:987657897
   alias siigo="eval web siigo"
   alias gpt="eval web gpt"
   alias lojas="eval web lojas"
   alias yt="eval web yt"
   alias ytd="read -p 'Enter youtube link to download: ' v_ans; yt-dlp $v_ans"

   alias whatsapp="xdg-open https://web.whatsapp.com"



#alias cm="cmatrix || $traits_pkg install cmatrix && cmatrix"
alias cm="cmatrix"

# Telling bash not to save command line on history log file that have either a whit space befor it ou that the previous line is duplicate
   # More info at: '$ man bash'
   HISTCONTROL=ignoreboth


# Termux alias
   alias REC="termux-microphone-record -l 0"
   alias rec="termux-microphone-record -d && clear && echo 'Going'" # Starts voice recording (There should be a fast dial for this option)

   alias cer="termux-microphone-record -q" # Stops voice recording (There should be a fast dial for this option)
      alias b="termux-microphone-record -q" # Stops voice recording (There should be a fast dial for this option)
      alias recs="termux-microphone-record -q" # Stops voice recording (There should be a fast dial for this option)
      
   alias paste="termux-clipboard-get"
   alias copy="shift; termux-clipboard-get "$*""
   alias sms="termux-sms-send -n" 

# Termux sms script
   function sms {
      case $1 in
         send)
            v_1="-n $2"
            v_2=$3
            echo "termux-sms-.. $v_1 $v_2" 
         ;;
         in)
         ;;
         out)
         ;;
         *)
         ;;
      esac
}

# uDev: alias para: 'date' que neste momento so da as horas e dia em ingles e com pouca info, udev: criar date que da info tao boas quanto a fx 'date' que criei no emacs init.el

alias pycharm="pycharm-community 1>/dev/null &"

alias grep="grep --color=auto"

function bt {
   # See battery status
   
   if [ $(uname -o) == "Android" ]; then
      termux-battery-status
   else
      case $1 in 
         a) upower -i `upower -e | grep 'BAT'` ;;
         p) echo -n "Battery percentage = " && cat /sys/class/power_supply/BAT0/capacity ;;
         *) upower -i $(upower -e | grep BAT) | grep --color=never -E "state|to\ full|to\ empty|percentage" 
         ;;
      esac
   fi
}

# uDev: fzf menu for: jobs, Ctrl-z, fg, kill $PID, etc

function dos_2_unix {
   clear
   figlet "DRYa: DOS to Unix"
   echo "DRYa: convert a DOS file into Unix"

   ## When editing a file with emacs, it got windows new-line formatation \r and vim was not detecting it. So, when running the file that was actually a .sh script it gave the error "bash line 2: $'\r': command not found" Now, we can either run the command "sed -i 's/\r$//' scriptname.sh" or we can install dos2unix and run "dos2unix scriptname.sh". DRYa will hava a script to correct it also called 'dos-2-unix' by the reason I want to know what is being done by all my scripts

   # uDev: Adicionar explicaco disto tambem na wikiD

   echo 
   echo "It will remove a bug when bash attempts to source a file"
   echo "error message: (uDev)"
   echo "explanation: (uDev)"
   echo 
   echo "Feed me a name (or path name) of a file to correct"
   echo " > (uDev)"
   #"sed -i 's/\r$//' scriptname.sh"
}
   

alias irc="irssi" # An IRC client :: Install it with: pkg install irssi

alias d="bash ${v_REPOS_CENTER}/DRYa/all/bin/data.sh"  # Fx `data` already exists at .../DRYa/bin/data.sh and this is an abreviation

#alias wiki="EM ${v_REPOS_CENTER}/wikiD/wikiD"
alias wiki="EM -nw /mnt/c/wsl-dv/Repositories/wikiD/wikiD.org"

function f_debug {
   # Degug function: use it when you need to re-open this file over and over again for debug.
	read
	vim ${v_REPOS_CENTER}/DRYa/all/config-bash-alias
	#pkill -9 -x ~/Repositories/DRYa/all/config-bash-alias
}





function f_drya-messages {
   # All Seiva's software (including DRYa)
      # will have at the start of the file,
      # a line that
      # will tell ~/.tmp/drya-messages.txt
      # that that specific file was read.
      # This is for debugging process.
      # You can add a line to ~/.bashrc to delete
      # ~/.tmp/ everytime you open the terminal
      # and that way, everything is refreshed everytime

      alias drya-messages="less ~/.tmp/drya-messages.txt" #uDev: change to .dryarc  ## uDev: to be sent to drya.sh
}

# joke:
   alias research="tree /;tree /;tree /;tree /;tree /;tree /;tree /;tree /;tree /;tree /;tree /;tree /;tree /";

alias ls="ls -p --color=auto"
alias la="ls -pA"
alias ll="ls -pl"
alias lh="du -ah" # Lists all file's size
alias c="cd"
alias dcim='cd ~/storage/dcim/Camera || echo " \> You are trying to navige to a dir usually present on Android using Termux"'
alias RM="rm -rf"

alias mk="mkdir -p" # Creates one directory for each name given as an argument and in case that succeeds, changes working directory for the directory given as the first argument
function Mk {

   if [[ -z $* ]]; then
      # Creates a directory and navigates to it imediatly
      read -p "New directory name: " v_dir
      mkdir -p $v_dir
      cd $v_dir

   elif [ $1 == "h" ]; then
      echo "Instructions for Mk"
      echo ' > `Mk`      : Ask for new dir && cd $dir'
      echo ' > `Mk $dir` : Automatically create $dir && cd $dir'

   else 
      for i in $*
      do
         mkdir -p $i
      done
      ls
   fi
}

function lll {
   # Print for each file in `ls`, its absolute path
      # Prints to Terminal and to temp file
      # Also, if you give a number as arg, it will filter the output line. Example: `ls` prints 3 lines, so `lll 2` will print only the absolute path of the second line

   # udev: a pasta atual pode nao conter nenhum ficheiro do qual dar o abs path. Adicionar tambem opcao "Current ./"

   #  if [ -z $1 ]; then 
   #     # Se nao houver mais nenhum arg, imprime todas as linhas

   #     echo "Printing absolute path for each file:"

   #     for i in $(ls -A -p);
   #     do
   #        v_pwd=$(pwd)
   #        v_ls="$v_pwd/$i"

   #        echo $v_ls 
   #     done 

   #  elif [ -n $1 ]; then 
   #     # Se existir um arg 1, nao forma de numero, esse numero serve de filtro
   #     
   #     echo "uDev"
   #  fi


   # [fzf menu exemplo 1]
      # Menu Simples

      # Lista de opcoes para o menu `fzf`
         L0='SELECT (1 or +): `lll` Print Abs Path: '
         
         v_list=$(ls -A | fzf -m --cycle --prompt="$L0")

      # Atuar na escolha da lista
        v_pwd=$(pwd)

         for i in $v_list
         do
           echo "$v_pwd/$i" 
           echo
         done
       



}

alias tc="touch"
alias vb="cd ${v_REPOS_CENTER}/verbose-lines && echo 'Verbose-lines: tree' && tree ."

# uDev: 'Mv' Alias for 'cut' 'paste' 'list mv-v clipboard'
   # alias 'Mv'  : without arguments, show mv-cut/mv-paste clipboard and help
   # alias 'Mv c': move-cut  # add files and their absolute path to an array.... then paste then with mv-p at the dir you want
   # alias 'Mv C': move-cut  # move files from current dir to another at ~/.config/h.h/... and when 'Mv p' is used.... all contents from such dir are moved again to the final location
   # alias 'Mv p': move-paste
   # alias 'Mv l': Move to 'lixo'/'lx'
   alias lixo="mkdir -p ~/trash/ && mv $* ~/trash/"
      alias lx="lixo"

# 'Calc' and 'bc' are 2 Bash calculators
# 'split -n 5' is a command that splits a text file into 5 parts

# Media tools:
   alias untangle="termux-open-url https://youtube.com/shorts/0wobqw589l0?si=h4D_6LNBeid77Bq_"
   alias miau="termux-open-url https://www.instagram.com/reel/CinlDmBO0tO/?igshid=YmMyMTA2M2Y="
   alias capitain="termux-open-url https://youtube.com/shorts/lquMb_8j38w?si=awBQ0gxdoQYxW8TJ"
   alias eclipse="termux-open-url https://youtube.com/shorts/X87ZTOhkbf0?si=cKQGVXz4bZWySIXx"
   alias miau2="termux-open-url https://www.instagram.com/reel/C22n2C3iB_-/?igsh=MWM0bjlxN3E2aG5sNQ=="
   alias preta="termux-open-url https://www.instagram.com/reel/Cnol075KSIU/?igshid=YmMyMTA2M2Y="
   alias vibrato="termux-open-url https://www.youtube.com/watch?v=OLfwxzY-l7o"
   alias madagascar="termux-open-url https://youtu.be/Xe0dChqgTJQ?feature=shared"



function op {
   # Function to open all files and directories given as arguments ($*)
      # Similar apps: termux-open; termux-open-url; wslview

   # uDev: Since DRYa is developing traitsID, then in the future we will get our OS from an environment variable made by DRYa

   # Test in which OS this script is running:
      v_uname=$(uname -a)

   # from the list o arguments, send links to an array, send non-links to another array
      # Unseting array variabls, so that they start empty
         unset link links          # Erasing the contents of the 'links' variable/array
         unset non_link non_links  # Erasing the contents of the 'non_links' variable/array
         #unset ls_detected_files
         #unset op_special_commands
         #unset saved_recognized_files

      # Filtering the arguments 
      #  for i in $*
      #  do
      #     # Testing each arg
      #        link=$(echo $i | grep "^http")         # Attempt to detect if a given argument is a link
      #        non_link=$(echo $i | grep -v "^http")  # Ateempt to detect if a given argument is not a link (by inverting the grep search with -v)

      #     # For debug, verbose var:
      #        echo "arg: $i"

      #     # If var if link, go to Variable A; If var is non_non link, go to var B  (WITH VERBOSE, FOR DEBUG)
      #        [[ ! -z $link ]] && echo "'link' var is: $link" && \
      #        links+=("$link")  # If variable 'link' comes with some value (meaning that we detected a link) then, append it to the array 'links'

      #        [[ ! -z $non_link ]] && echo "'non_link' var is: $non_link" && \
      #        non_links+=("$non_link")
      #  done

      # Verbose results (for debug):
      #  echo
      #  echo "------------------------------"
      #  echo "'links' array: ${links[@]}"
      #  echo "'non_links' array: ${non_links[@]}"
      #  #read; clear; exit 0  # For testing only

   
   if [ -z $1 ]; then
      # Search file to open with `fzf`

      # Buscar um ficheiro apartir da pasta atual até todas as subpastas
         unset v_item
         v_item=$(fzf -m --prompt="DRYa: op: Select ficheiros para abrir com xdg-open: ")

      # So se houver algum nome na variavel $v_item, tenta abrir com xdg (evita `xdg-open` de reclamar erro por falta de argumentos)
         [[ -n $v_item ]] && for i in $(echo $v_item); do echo "DRYa: opening: $i"; xdg-open $i; done

   else
      # Try to find the file opener at each OS (for the given files, given as arguments):
         if [[ $v_uname =~ "Microsoft" ]]; then  # Test if this script is a Linux OS running inside windows (WSL (Windows sub-system for Linux):
            /mnt/c/windows/explorer.exe $*  # Original script, without a for loop
      
              # uDev: For links and non_links open accordingly:   
              #   # open each link
              #      for i in ${links[@]}
              #      do 
              #         /mnt/c/windows/explorer.exe $links  #Error: windows explorer does not open links
              #      done
              #
              #   # open each non_link
              #      for i in ${non_links[@]}
              #      do 
              #         /mnt/c/windows/explorer.exe $non_links
              #      done

         elif [[ $v_uname =~ "Android" ]]; then  # If it finds "Android" then it should be working at Termux terminal
               xdg-open $*
               # uDev: usar `termux-open --chooser`

         elif [[ $v_uname =~ "Linux" ]]; then  # If it is Any kind of Linux, try to open as standard
               xdg-open $*
         else
            echo "DRYa: 'op' command failed to open the arguments"
         fi
         
         # uDev: Add 'termux-open $* --chooser' as an option

         # uDev: '$ op grep 20240114_094706.jpg' para procurar 'grep' pela foto certa
         #       '$ op grep mv 20240114_094706.jpg' para mover a foto encontrada (precisa de um menu interativo)
      fi
}


# Ask the terminal to print the stroken
   alias stroken="cat ${v_REPOS_CENTER}/DRYa/all/etc/dot-files/git-github/current-stroken"
   # Notes:
      # At ${v_REPOS_CENTER}/DRYa/all/install.uninstall/stroken there is a copy of this file but with kore info to help new app users
      # We can install stroken automatically with: '$ drya install stroken'

alias website="termux-open-url https://seiva.yolasite.com/ 2>/dev/null || op https://seiva.yolasite.com/"

alias all="cd all; ls"
alias   A="cd all; ls"

alias notify="bash ${v_REPOS_CENTER}/DRYa/all/bin/notify.sh"
alias nt="bash ${v_REPOS_CENTER}/DRYa/all/bin/notify.sh"

alias slither="clear; cat ${v_REPOS_CENTER}/wikiD/all/slither; echo; echo"

function nfc {
   # Read and write NFC on termux
      clear
      figlet NFC
      echo "DRYa: Ler NFC (short)"

      # Creating a file to hold nfc content temporarily
         v_nfc=~/.tmp/termux-nfc-tmp-text
         mkdir -p ~/.tmp
         touch $v_nfc

      # Example sound
         v_sound=~/Repositories/DRYa/all/etc/sounds/example-sound-completion-bell.wav

      termux-nfc -r short > $v_nfc

      echo
      echo -n "NFC lido: "

      #read -p "Press Enter AFTER reading"

      v_nfc_text=$(grep "Payload" $v_nfc )

      if [[ $v_nfc_text =~ "nfc-base1" ]]; then
         echo "Base 1"

         termux-wake-lock

         v_secs=$((60 * 60))
         while [ $v_secs -gt 0 ]; do
            echo -ne "\r$v_secs"
            sleep 1
            : $((v_secs--))
         done

         echo
         termux-media-player play $v_sound 1>/dev/null
         termux-wake-unlock

      elif [[ $v_nfc_text =~ "nfc-MLavar1-start" ]]; then
         echo "Maquina de lavar: Inicio"

         for i in {1..60};
         do
            echo $i
            sleep 1
         done

      elif [[ $v_nfc_text =~ "nfc-MLavar1-end" ]]; then
         echo "Maquina de lavar: Fim"

      else
         echo $v_nfc_text
      fi
}

alias py="python3"
alias pip="pip3"

alias timg="termimage"

# uDev: alias dnf-apt-pkg-pacman = X

alias        t-play="termux-media-player play"
alias       t-pause="termux-media-player pause"
alias        t-stop="termux-media-player stop"
alias        t-info="termux-media-player info"
alias  t-sound-test="termux-media-player play ${v_REPOS_CENTER}/DRYa/all/etc/sounds/example-sound-completion-bell.wav" ## example sound
alias t-sound-test1="mpv ${v_REPOS_CENTER}/DRYa/all/etc/sounds/example-sound-completion-bell.wav > /dev/null 2>&1 & pid=$!" ## example sound

alias tufnar="echo '# uDev: Tufnar Isaura 91... Check a phone list on omni-log" 

function hr {
   # Fx para adicionar novos horarios do trabalho e visual os que ja existem

   # Lista de diretorios onde é possivel encontrar mais imgs de horarios
   # 
   #   cd /storage/0123-4567
   #   cd /storage/
   #   cd /storage/83DB-10EA || cd /storage 
   #   cd /sdcard/Termux-bridge-Android
   #
   
   # Lista de opcoes para o menu `fzf`
      L6='6. Abrir     | `upK`' 
      L5="5. Registar  | Horas apos o turno (upK)" 
      L4="4. Ver       | Todos os Horarios anteriores"
      L3="3. Adicionar | Horario novo"
      L2="2. Ver       | Horario atual"
      L1="1. Cancelar"

      v_list=$(echo -e "$L1 \n$L2 \n$L3 \n$L4 \n$L5 \n$L6" | fzf --cycle --prompt="DRYa: Gerir Horario upk: ")

   # Perceber qual foi a escolha da lista
      [[ $v_list =~ "6" ]] && upk
      [[ $v_list =~ "5" ]] && echo "uDev: $L5"
      [[ $v_list =~ "4" ]] && echo "uDev: $L4"
      [[ $v_list =~ "3" ]] && echo "uDev: $L3"
      [[ $v_list =~ "2" ]] && echo "uDev: $L2"
      [[ $v_list =~ "1" ]] && echo 'Canceled: `hr`'
      unset v_list

      echo
}

function shebang {
   # It creates a bash script (if no args are input)
      # Or gives a shebang to the file you input as argument 1)
      # It also changes the permissions of tbe file to executable

   function f_inform_creation_noArgs {
      # Informing the user that the process is ready
      
      # Using command 'ls' to test existence
         ls $v_ans 1>/dev/null # Delete all output
         if [[ $? == 0 ]]; then # If last '$ ls' command was sucessfull, then:

            tput setaf 3
               echo -n " > File "
            tput setaf 4
               echo -n $v_ans
            tput setaf 3
               echo " created!"
            tput sgr0

            read -s -n 1
            vim $v_ans
         else 
            echo File not created
         fi
   }

   function f_inform_creation {
      # Informing the user that the process is ready

      
      # Using command 'ls' to test existence
         ls $i 1>/dev/null # Delete all output
         if [[ $? == 0 ]]; then

            tput setaf 3
               echo -n " > File "
            tput setaf 4
               echo -n $i
            tput setaf 3
               echo " created!"
            tput sgr0
         else 
            echo File not created
         fi
   }

   function f_test_existence_noArgs {
      # Test existence of file named as argument given

      if [[ -f $v_ans ]]; then
         # Test if file exists to avoid overwriting it
         echo -n "File "
         tput setaf 4
         echo -n "$v_ans "
         tput sgr0
         echo "already exists, please choose another name"
      else 
         # If file does not exist, run:
         touch $v_ans
         echo "#!/bin/bash" > ./${v_ans}
         chmod +x ./${v_ans}

         f_inform_creation_noArgs
         vim $v_ans

      fi
   }

   function f_test_existence {
      # Test existence of file named as argument given

      if [[ -f $i ]]; then
         # Test if file exists to avoid overwriting it
         echo -n "File "
         tput setaf 4
         echo -n "$i "
         tput sgr0
         echo "already exists, please choose another name"
      else 
         # If file does not exist, run:
         touch $i
         echo "#!/bin/bash" > ./${i}
         chmod +x ./${i}
         
         f_inform_creation 

      fi
   }

   if [[ -z $1 ]]; then
      # If no arg is given
         echo -n " > File name? "
         read v_ans

         f_test_existence_noArgs

   else 
      # If there are arguments, test each one for exuatence:
         for i in $@; do 
            f_test_existence
         done
   fi
}


function go {
	# This function opens applications apart from the terminal. It means that you can close the terminal after the aplications launch and the terminal being killed does not kill the apps it created
	for v_arg in $@
	do
		setsid $v_arg &>/dev/null
	done

      # Detecting if any of the arguments given has the word "terminal" to replace for "gnome-terminal"
      if [[ $@ =~ "terminal" ]]; then setsid gnome-terminal &>/dev/null; fi


      # Detect if LAST argument is "bye" to make the current terminal "exit"
         # Store all arguments inside a variable
         v_allArguments=$*
         
         # Using awk to detect only the last argument
         v_lastArg=$(echo $v_allArguments | awk '{ print $NF }')
         if [ ${v_lastArg} == "bye" ]; then 
            #echo "bye was said. Press enter to exit"    #Exit message
            #read                                        #Pause before exit
            exit
         fi

      # If there is an app called "bye" that you want to open with the command "go" then just put something else in from of it to prevent "exit" command to happen
         # Use: $ go bye ...

      # If you simply want to restart the terminal
         if [ $1 == "again" ]; then gnome-terminal && exit; fi

   # If you want to export just this "go" script for an entire repository, the name sugested is: bash-open-app-at-external-window
}

# This command is same as: "source ~/.bashrc" (but needs the function: go)
alias src="go gnome-terminal; exit"
alias f5="source ~/.bashrc"


alias ,="cd"
alias ,,="clear; tput cnorm" # Also resets the blinking cursor if it was hidden
alias ,,,=", ; ,," # Same as both 2 previous commands put together
alias .,="ls -Ap" # uDev: This is meant also to SEE if the directory is empty or not, therefore, if the dir is Totally empty, echo "This place is empty"
alias CLEAR="cd; clear; figlet 'Clear'; tput cnorm" # Also resets the blinking cursor if it was hidden
alias sh="bash"

function f_emacs {
   # Attempt to untangle emacs alias (due to so many versions)
   
   alias em="emacs"
   alias Em="/mnt/c/Program\ Files/Emacs/x86_64/bin/emacs.exe" # Opens emacs GUI on windows OS
   alias Emacs="/mnt/c/Program\ Files/Emacs/x86_64/bin/emacs.exe" # Opens emacs GUI on windows OS
   alias ems="emacs --script"

   # Decide for alias EM which emacs corresponds best with the System
      if [ -f /mnt/c/Program\ Files/Emacs/x86_64/bin/emacs.exe ]; then 
         # If emacs GUI exists (on windows), then
         alias EM="/mnt/c/Program\ Files/Emacs/x86_64/bin/emacs.exe" 

      else 
         ## If emacs GUI does not exist, then set it for terminal emacs
         alias EM="emacs"
      fi
}
f_emacs

alias a="cd all && ls"
alias hi="hello!"

alias ipconfig="ifconfig"  # Imitating windows

# uDev: to put under menuFAV F
alias hind="vim ${v_REPOS_CENTER}/yogaBashApp/all/about-hinduism/about-hinduism.txt"


# Pandoc app to create man pages

alias ca="bash ${v_REPOS_CENTER}/DRYa/all/bin/ca-lculadoras.sh"

# Acessing emacs-wiki.org
   alias emacs-wiki="emacs ${v_REPOS_CENTER}/dWiki/emacs/gnu-emacs/emacs-wiki.org" #Add message "file: ~/Repos.../x.../y.../z... was opened" >> ~/.tmp/messages.txt

# Acessing emacs init.el file
   alias emacs-init="emacs ~/.emacs.d/init.el"




function f_hibernate {
   if [ $traits_OS == "Windows" ]; then
      cd ${v_REPOS_CENTER}/DRYa/all/batch/shut-restart-hibernate-sleep/
      /mnt/c/Windows/System32/cmd.exe /c hibernar.lnk

   elif [ $traits_OS == "Linux" ]; then
      sudo systemctl hibernate
   fi
}

function f_restart {
   if [ $traits_OS == "Windows" ]; then
      cd ${v_REPOS_CENTER}/DRYa/all/batch/shut-restart-hibernate-sleep/
      /mnt/c/Windows/System32/cmd.exe /c reiniciar.lnk

   elif [ $traits_OS == "Linux" ]; then
      shutdown -r now
   fi
}

function f_shutdown {
   if [ $traits_OS == "Windows" ]; then
      cd ${v_REPOS_CENTER}/DRYa/all/batch/shut-restart-hibernate-sleep/
      /mnt/c/Windows/System32/cmd.exe /c desligar.lnk
   
   elif [ $traits_OS == "Linux" ]; then
      shutdown now
   fi
}





alias bashrc="vim ~/.bashrc"
alias vimrc="vim ~/.vimrc"

function teste {
   echo "Teste do uso de placeholder %s em bash com printf"

   # Teste 1
      name=Alice
      printf "Hi, %s \n" "$name"

   # Teste 2
      name=Alce
      printf "Hi, %s \n" \
      "$name"

   # Teste 3
      name1=Alface
      name2=Ale
      printf "Hi, %s %s \n" \
      "$name1" \
      "$name2"
}

function hist {
   # history-recall sub-app
   mkdir -p ~/.tmp/
   history > ~/.tmp/fileA.txt
   history

   echo -e "\n > Type Ctrl+C to cancel \n > Type a number to navigate: "
   echo -n " > "
   read v_ans

   #echo "grep results:"

   grep "$v_ans" ~/.tmp/fileA.txt > ~/.tmp/fileB.txt

   # Remove 2 character to the begining of the text
   sed -i 's/^..//g' ~/.tmp/fileB.txt

   # Debugging process
   #echo "Sed results:"
   #echo "cat fileB"
   #cat ~/.tmp/fileB.txt

   # Search patter of the beggining of the line
   grep ^$v_ans ~/.tmp/fileB.txt > ~/.tmp/fileA.txt

   # Debugging process
   #echo "cat fileA"
   #cat ~/.tmp/fileA.txt
   sed -i 's/^\w*\ *//' ~/.tmp/fileA.txt

   # Now, cutting the command
   cut -d ' ' -f2- ~/.tmp/fileA.txt

   # Debugging process
   #echo "fileA after cut"
   #cat ~/.tmp/fileA.txt
   #echo "trying to eval:"
   #read

   # Creating a variable called v_eval to store the content of the file as text
   v_eval=$(cat ~/.tmp/fileA.txt)

   # Trying to run the text of the file. If it the shell has executables that are called the same way as this txt is written, then run this text at the terminal as if it was written to trigger an executable
   eval $v_eval
}




# Temporary script to map audio chapters in a file currently being studied
   alias eoc="echo 'end of chapter, right?'; echo >> ~/eof; info 1>>~/eoc"

# Bash fork bomb
   # Link tutorial: https://youtu.be/wIsGXkxXZzE
   alias start-fork-bomb=":() { :|: & };:"

# Verbose file (variables and outputs)
   echo "DRYa: File ended loading: DRYa's $v_title" >> $v_MSGS
