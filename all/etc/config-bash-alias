#!bin/bash
# Title: config-bash-alias
# Description: Dv List of all alias and Functions (for Linux terminal)
# Use: This file is meant to be sourced from "~/Repositories/DRYa/all/source-all-drya-files"

# At drya-text-editor: functions: op go 
#                      alias:     em Em EM xdg



# Verbose file (variables and outputs)
   v_title="config-bash-alias"  # Name of this file
   echo "DRYa: File Started loading: $v_title" >> $v_MSGS
   echo "      (for extra alias and configs not belonging to any app yet)" >> $v_MSGS




# Sourcing DRYa Lib 1: Color schemes, f_greet, f_greet2, f_talk, f_done, f_anyK, f_Hline, f_horizlina, f_verticline, etc... [From the repo at: "https://github.com/SeivaDArve/DRYa.git"]
   source ${v_REPOS_CENTER}/DRYa/all/lib/drya-lib-1-colors-greets.sh
   v_greet="DRYa"
   v_talk="DRYa: "


# Telling bash not to save command line on history log file that have either a whit space befor it ou that the previous line is duplicate
   # More info at: '$ man bash'
   HISTCONTROL=ignoreboth


# Set the keybindings to vi/vim mode:
   #set -o vi


alias hi="echo hello!"  # Used as test



# For .../bin scripts
   alias clc="bash ${v_REPOS_CENTER}/DRYa/all/bin/ca-lculadoras.sh"
   alias  ca="bash ${v_REPOS_CENTER}/DRYa/all/bin/ca-lculadoras.sh"

   alias notes="bash ${v_REPOS_CENTER}/DRYa/all/bin/no-tes.sh"
   alias  note="bash ${v_REPOS_CENTER}/DRYa/all/bin/no-tes.sh"
   alias    no="bash ${v_REPOS_CENTER}/DRYa/all/bin/no-tes.sh"
   alias    td="bash ${v_REPOS_CENTER}/DRYa/all/bin/no-tes.sh td"
   alias    Td="bash ${v_REPOS_CENTER}/DRYa/all/bin/no-tes.sh td"

   alias data="bash ${v_REPOS_CENTER}/DRYa/all/bin/data.sh"  # Fx `data` already exists at .../DRYa/bin/data.sh and this is an abreviation
   alias    d="bash ${v_REPOS_CENTER}/DRYa/all/bin/data.sh"  # Fx `data` already exists at .../DRYa/bin/data.sh and this is an abreviation

alias cam="am start -a android.media.action.IMAGE_CAPTURE"

alias start-termux-gui="vncserver -localhost :1"  # Inicia  o servidor VNC no ecra :1
alias stop-termux-gui="vncserver -kill :1"        # Termina o servidor VNC no ecra :1

alias timg="termimage" # App to print any img on the terminal in an ascii style

alias inventar-notas="bash /home/indratena/Repositories/scratch-paper/shuf"  # temporary alias


# Function for web options. (Sent to .../DRYa/bin/init-bin/web.sh
#  function web { ... } 
#
#  Shortcuts for fx `web`
   alias whatsapp="xdg-open https://web.whatsapp.com"
   alias    siigo="eval web siigo"
   alias      gpt="eval web gpt & disown"
   alias    lojas="eval web lojas"
   alias       yt="eval web yt"
   alias      ytd="read -p 'Enter youtube link to download: ' v_ans; yt-dlp $v_ans"

# Para Javascript
   alias node="[[ -f ~/.config/.drya.node.rc ]] && node -r ~/.config/.drya.node.rc || node"


alias py="python3"
alias pip="pip3"
alias cm="cmatrix"  #alias cm="cmatrix || $traits_pkg install cmatrix && cmatrix"
alias timg="termimage"
alias pycharm="pycharm-community 1>/dev/null &"
alias irc="irssi" # An IRC client :: Install it with: pkg install irssi


# Termux Microphone Recorder at: .../DRYa/.../ez-ov.sh
      

alias tufnar="echo '# uDev: Tufnar Isaura 91... Check a phone list on omni-log" 

# Termux sms script
   alias sms="termux-sms-send -n" 

   function sms {
      case $1 in
         send)
            v_1="-n $2"
            v_2=$3
            echo "termux-sms-.. $v_1 $v_2" 
         ;;
         in)
         ;;
         out)
         ;;
         *)
         ;;
      esac
   }

# uDev: alias para: 'date' que neste momento so da as horas e dia em ingles e com pouca info, udev: criar date que da info tao boas quanto a fx 'date' que criei no emacs init.el



function bt {
   # See battery status
   # uDev: use trid instead
   
   if [ $(uname -o) == "Android" ]; then
      termux-battery-status
   else
      case $1 in 
         a) upower -i `upower -e | grep 'BAT'` ;;
         p) echo -n "Battery percentage = " && cat /sys/class/power_supply/BAT0/capacity ;;
         *) upower -i $(upower -e | grep BAT) | grep --color=never -E "state|to\ full|to\ empty|percentage" 
         ;;
      esac
   fi
}

# uDev: fzf menu for: jobs, Ctrl-z, fg, kill $PID, etc

function dos_2_unix {
   clear
   figlet "DRYa: DOS to Unix"
   echo "DRYa: convert a DOS file into Unix"

   ## When editing a file with emacs, it got windows new-line formatation \r and vim was not detecting it. So, when running the file that was actually a .sh script it gave the error "bash line 2: $'\r': command not found" Now, we can either run the command "sed -i 's/\r$//' scriptname.sh" or we can install dos2unix and run "dos2unix scriptname.sh". DRYa will hava a script to correct it also called 'dos-2-unix' by the reason I want to know what is being done by all my scripts

   # uDev: Adicionar explicaco disto tambem na wikiD

   echo 
   echo "It will remove a bug when bash attempts to source a file"
   echo "error message: (uDev)"
   echo "explanation: (uDev)"
   echo 
   echo "Feed me a name (or path name) of a file to correct"
   echo " > (uDev)"
   #"sed -i 's/\r$//' scriptname.sh"
}
   



alias wiki="EM -nw /mnt/c/wsl-dv/Repositories/wikiD/wikiD.org"


function f_drya-messages {
   # All Seiva's software (including DRYa)
      # will have at the start of the file,
      # a line that
      # will tell ~/.tmp/drya-messages.txt
      # that that specific file was read.
      # This is for debugging process.
      # You can add a line to ~/.bashrc to delete
      # ~/.tmp/ everytime you open the terminal
      # and that way, everything is refreshed everytime

      alias drya-messages="less ~/.tmp/drya-messages.txt" #uDev: change to .dryarc  ## uDev: to be sent to drya.sh
}

# joke:
   alias research="tree /;tree /;tree /;tree /;tree /;tree /;tree /;tree /;tree /;tree /;tree /;tree /;tree /";


alias tc="touch"
alias ls="ls -p --color=auto"
alias la="ls -pA"
alias ll="ls -pl"
alias lll=f_ls_with_absolute_path
alias lh="du -ah" # Lists all file's size
alias RM="rm -rf"
alias lixo="mkdir -p ~/trash/ && mv $* ~/trash/"
   alias lx="lixo"

alias cl="cd; tput cnorm; clear; figlet 'Clear'" # Also resets the blinking cursor if it was hidden
alias sh="bash"

alias all="cd all && ls"
alias   a="cd all && ls"
alias   A="cd all && ls"

alias mk="mkdir -p" # Creates one directory for each name given as an argument and in case that succeeds, changes working directory for the directory given as the first argument
 #uDev: `mk .` to go to last created dir
 #uDev: `mk dir1 . dir2 dir3` to make all dirs and navigate do dir2
function MK {


   if [[ -z $* ]]; then
      # Creates a directory and navigates to it imediatly
      read -p "New directory name: " v_dir
      mkdir -p $v_dir
      cd $v_dir

   elif [ $1 == "h" ]; then
      echo "Instructions for Mk"
      echo ' > `Mk`      : Ask for new dir && cd $dir'
      echo ' > `Mk $dir` : Automatically create $dir && cd $dir'

   else 
      for i in $*
      do
         mkdir -p $i
      done
      ls
   fi

   # uDev: Adicionar menu fzf no final, para perguntar ao user se quer navegar para alguma dessas pastas ou para nenhuma
}

alias grep="grep --color=auto"

function f_ls_with_absolute_path {
   # Print for each file in `ls`, its absolute path. It is used by the alias `lll`
      # Prints to Terminal and to temp file
      # Also, if you give a number as arg, it will filter the output line. Example: `ls` prints 3 lines, so `lll 2` will print only the absolute path of the second line

   # uDev: renomear comando para `ls ...`

   # udev: a pasta atual pode nao conter nenhum ficheiro do qual dar o abs path. Adicionar tambem opcao "Current ./"

   #  if [ -z $1 ]; then 
   #     # Se nao houver mais nenhum arg, imprime todas as linhas

   #     echo "Printing absolute path for each file:"

   #     for i in $(ls -A -p);
   #     do
   #        v_pwd=$(pwd)
   #        v_ls="$v_pwd/$i"

   #        echo $v_ls 
   #     done 

   #  elif [ -n $1 ]; then 
   #     # Se existir um arg 1, nao forma de numero, esse numero serve de filtro
   #     
   #     echo "uDev"
   #  fi


   # [fzf menu exemplo 1]
      # Menu Simples

      # Lista de opcoes para o menu `fzf`
         L0='SELECT (1 or +): `lll` Print Abs Path: '
         
         v_list=$(ls -A | fzf -m --cycle --prompt="$L0")

      # Atuar na escolha da lista
        v_pwd=$(pwd)

         for i in $v_list
         do
           echo "$v_pwd/$i" 
           echo
         done



   # uDev: os resultados, enviar para drya-clipboard para o vim poder colar 
}

# Options for SQLite
   # Path to the init file
      v_init_sql=${v_REPOS_CENTER}/DRYa/all/etc/dot-files/sqlite/init.sql

   # Open any database file with the init file configurations
      alias sql="sqlite3"

   # Para cada database fornecida como arg, mostrar todas as suas tabelas em output
      function sql-t {
         f_talk; echo "Mencionando todas as tabelas presentes em cada database fornecida como argumento"
                 echo

         for i in $@
         do 
            sqlite3 $i ".tables"
            echo
         done 

      }
   



alias vb="cd ${v_REPOS_CENTER}/verbose-lines && echo 'Verbose-lines: tree' && tree ."


# 'Calc' and 'bc' are 2 Bash calculators
# 'split -n 5' is a command that splits a text file into 5 parts

# Media tools:
   alias untangle="termux-open-url https://youtube.com/shorts/0wobqw589l0?si=h4D_6LNBeid77Bq_"
   alias miau="termux-open-url https://www.instagram.com/reel/CinlDmBO0tO/?igshid=YmMyMTA2M2Y="
   alias capitain="termux-open-url https://youtube.com/shorts/lquMb_8j38w?si=awBQ0gxdoQYxW8TJ"
   alias eclipse="termux-open-url https://youtube.com/shorts/X87ZTOhkbf0?si=cKQGVXz4bZWySIXx"
   alias miau2="termux-open-url https://www.instagram.com/reel/C22n2C3iB_-/?igsh=MWM0bjlxN3E2aG5sNQ=="
   alias preta="termux-open-url https://www.instagram.com/reel/Cnol075KSIU/?igshid=YmMyMTA2M2Y="
   alias vibrato="termux-open-url https://www.youtube.com/watch?v=OLfwxzY-l7o"
   alias madagascar="termux-open-url https://youtu.be/bYxt96GAf4g?feature=shared"
   alias monstro="termux-open-url https://youtu.be/I5e6ftNpGsU?feature=shared"


# Ask the terminal to print the stroken
   alias stroken="cat ${v_REPOS_CENTER}/DRYa/all/etc/dot-files/git-github/current-stroken"
   # Notes:
      # At ${v_REPOS_CENTER}/DRYa/all/install.uninstall/stroken there is a copy of this file but with kore info to help new app users
      # We can install stroken automatically with: '$ drya install stroken'

alias website="termux-open-url https://seiva.yolasite.com/ 2>/dev/null || op https://seiva.yolasite.com/"


alias notify="bash ${v_REPOS_CENTER}/DRYa/all/bin/notify.sh"
alias nt="bash ${v_REPOS_CENTER}/DRYa/all/bin/notify.sh"

alias slither="clear; cat ${v_REPOS_CENTER}/wikiD/all/slither; echo; echo"

function nfc {
   # Read and write NFC on termux
      clear
      figlet NFC
      echo "DRYa: Ler NFC (short)"

      # Creating a file to hold nfc content temporarily
         v_nfc=~/.tmp/termux-nfc-tmp-text
         mkdir -p ~/.tmp
         touch $v_nfc

      # Example sound
         v_sound=~/Repositories/DRYa/all/etc/sounds/example-sound-completion-bell.wav

      termux-nfc -r short > $v_nfc

      echo
      echo -n "NFC lido: "

      #read -p "Press Enter AFTER reading"

      v_nfc_text=$(grep "Payload" $v_nfc )

      if [[ $v_nfc_text =~ "nfc-base1" ]]; then
         echo "Base 1"

         termux-wake-lock

         v_secs=$((60 * 60))
         while [ $v_secs -gt 0 ]; do
            echo -ne "\r$v_secs"
            sleep 1
            : $((v_secs--))
         done

         echo
         termux-media-player play $v_sound 1>/dev/null
         termux-wake-unlock

      elif [[ $v_nfc_text =~ "nfc-MLavar1-start" ]]; then
         echo "Maquina de lavar: Inicio"

         for i in {1..60};
         do
            echo $i
            sleep 1
         done

      elif [[ $v_nfc_text =~ "nfc-MLavar1-end" ]]; then
         echo "Maquina de lavar: Fim"

      else
         echo $v_nfc_text
      fi
}



# uDev: alias dnf-apt-pkg-pacman = X

# uDev: send to ez-ov
   alias        t-play="termux-media-player play"
   alias       t-pause="termux-media-player pause"
   alias        t-stop="termux-media-player stop"
   alias        t-info="termux-media-player info"
   alias  t-sound-test="termux-media-player play ${v_REPOS_CENTER}/DRYa/all/etc/sounds/example-sound-completion-bell.wav" ## example sound
   alias t-sound-test1="mpv ${v_REPOS_CENTER}/DRYa/all/etc/sounds/example-sound-completion-bell.wav > /dev/null 2>&1 & pid=$!" ## example sound

# DRYa clipboard will be set on drya.sh
   alias t-paste="termux-clipboard-get"  # `paste` ja existe e é util, nao pode ser usado. 
   alias t-copy="shift; termux-clipboard-get "$*""



function hr {
   # Fx para adicionar novos horarios do trabalho e visual os que ja existem

   # Lista de diretorios onde é possivel encontrar mais imgs de horarios
   # 
   #   cd /storage/0123-4567
   #   cd /storage/
   #   cd /storage/83DB-10EA || cd /storage 
   #   cd /sdcard/Termux-bridge-Android
   #
   
   # Lista de opcoes para o menu `fzf`
      L6='6. Abrir     | `upK`' 
      L5="5. Registar  | Horas apos o turno (upK)" 
      L4="4. Ver       | Todos os Horarios anteriores"
      L3="3. Adicionar | Horario novo"
      L2="2. Ver       | Horario atual"
      L1="1. Cancelar"

      v_list=$(echo -e "$L1 \n$L2 \n$L3 \n$L4 \n$L5 \n$L6" | fzf --cycle --prompt="DRYa: Gerir Horario upk: ")

   # Perceber qual foi a escolha da lista
      [[ $v_list =~ "6" ]] && upk
      [[ $v_list =~ "5" ]] && echo "uDev: $L5"
      [[ $v_list =~ "4" ]] && echo "uDev: $L4"
      [[ $v_list =~ "3" ]] && echo "uDev: $L3"
      [[ $v_list =~ "2" ]] && echo "uDev: $L2"
      [[ $v_list =~ "1" ]] && echo 'Canceled: `hr`'
      unset v_list

      echo
}

function shebang {
   # It creates a bash script (if no args are input)
      # Or gives a shebang to the file you input as argument 1)
      # It also changes the permissions of tbe file to executable

   function f_inform_creation_noArgs {
      # Informing the user that the process is ready
      
      # Using command 'ls' to test existence
         ls $v_ans 1>/dev/null # Delete all output
         if [[ $? == 0 ]]; then # If last '$ ls' command was sucessfull, then:

            tput setaf 3
               echo -n " > File "
            tput setaf 4
               echo -n $v_ans
            tput setaf 3
               echo " created!"
            tput sgr0

            read -s -n 1
            vim $v_ans
         else 
            echo File not created
         fi
   }

   function f_inform_creation {
      # Informing the user that the process is ready

      # Using command 'ls' to test existence
         ls $i 1>/dev/null # Delete all output
         if [[ $? == 0 ]]; then

            tput setaf 3
               echo -n " > File "
            tput setaf 4
               echo -n $i
            tput setaf 3
               echo " created!"
            tput sgr0
         else 
            echo File not created
         fi
   }

   function f_test_existence_noArgs {
      # Test existence of file named as argument given

      if [[ -f $v_ans ]]; then
         # Test if file exists to avoid overwriting it
         echo -n "File "
         tput setaf 4
         echo -n "$v_ans "
         tput sgr0
         echo "already exists, please choose another name"
      else 
         # If file does not exist, run:
         touch $v_ans
         echo "#!/bin/bash" > ./${v_ans}
         chmod +x ./${v_ans}

         f_inform_creation_noArgs
         vim $v_ans

      fi
   }

   function f_test_existence {
      # Test existence of file named as argument given

      if [[ -f $i ]]; then
         # Test if file exists to avoid overwriting it
         echo -n "File "
         tput setaf 4
         echo -n "$i "
         tput sgr0
         echo "already exists, please choose another name"
      else 
         # If file does not exist, run:
         touch $i
         echo "#!/bin/bash" > ./${i}
         chmod +x ./${i}
         
         f_inform_creation 

      fi
   }

   if [[ -z $1 ]]; then
      # If no arg is given
         echo -n " > File name? "
         read v_ans

         f_test_existence_noArgs

   else 
      # If there are arguments, test each one for exuatence:
         for i in $@; do 
            f_test_existence
         done
   fi
}





alias ipconfig="ifconfig"  # Imitating windows

# uDev: to put under menuFAV F
alias hind="vim ${v_REPOS_CENTER}/yogaBashApp/all/about-hinduism/about-hinduism.txt"


# Pandoc app to create man pages


# Acessing emacs-wiki.org
   alias emacs-wiki="emacs ${v_REPOS_CENTER}/dWiki/emacs/gnu-emacs/emacs-wiki.org" #Add message "file: ~/Repos.../x.../y.../z... was opened" >> ~/.tmp/messages.txt

# Acessing emacs init.el file
   alias emacs-init="emacs ~/.emacs.d/init.el"









alias bashrc="vim ~/.bashrc"
alias vimrc="vim ~/.vimrc"

function teste {
   echo "Teste do uso de placeholder %s em bash com printf"

   # Teste 1
      name=Alice
      printf "Hi, %s \n" "$name"

   # Teste 2
      name=Alce
      printf "Hi, %s \n" \
      "$name"

   # Teste 3
      name1=Alface
      name2=Ale
      printf "Hi, %s %s \n" \
      "$name1" \
      "$name2"
}

function hist {
   # history-recall sub-app
   mkdir -p ~/.tmp/
   history > ~/.tmp/fileA.txt
   history

   echo -e "\n > Type Ctrl+C to cancel \n > Type a number to navigate: "
   echo -n " > "
   read v_ans

   #echo "grep results:"

   grep "$v_ans" ~/.tmp/fileA.txt > ~/.tmp/fileB.txt

   # Remove 2 character to the begining of the text
   sed -i 's/^..//g' ~/.tmp/fileB.txt

   # Debugging process
   #echo "Sed results:"
   #echo "cat fileB"
   #cat ~/.tmp/fileB.txt

   # Search patter of the beggining of the line
   grep ^$v_ans ~/.tmp/fileB.txt > ~/.tmp/fileA.txt

   # Debugging process
   #echo "cat fileA"
   #cat ~/.tmp/fileA.txt
   sed -i 's/^\w*\ *//' ~/.tmp/fileA.txt

   # Now, cutting the command
   cut -d ' ' -f2- ~/.tmp/fileA.txt

   # Debugging process
   #echo "fileA after cut"
   #cat ~/.tmp/fileA.txt
   #echo "trying to eval:"
   #read

   # Creating a variable called v_eval to store the content of the file as text
   v_eval=$(cat ~/.tmp/fileA.txt)

   # Trying to run the text of the file. If it the shell has executables that are called the same way as this txt is written, then run this text at the terminal as if it was written to trigger an executable
   eval $v_eval
}




# Temporary script to map audio chapters in a file currently being studied
   alias eoc="echo 'end of chapter, right?'; echo >> ~/eof; info 1>>~/eoc"

# Bash fork bomb
   # Link tutorial: https://youtu.be/wIsGXkxXZzE
   alias start-fork-bomb=":() { :|: & };:"



function arco {
   # Codigos de emergencia "Arco-Iris" para cominicacoes via radio
   clear

   function f_arco {
      # Especie de "heredoc" com a tabela
      echo '
|-----------------------+---------------------------|
| Arco-Iris             | Significado               |
|-----------------------+---------------------------|
| Branco                | Silêncio nas comunicações |
| Laranja               | Explosão                  |
| Vermelho (Alfa India) | Fogo                      |
| Verde                 | Evacuacao e pre-evacuacao |
| Amarelo               | Bomba                     |
| Roxo                  | Terrorismo                |
| Castanho              | Gás                       |
| Cinza                 | Derrame                   |
| Preto                 | Objeto Suspeito           |
| Magenta               | Tsunami                   |
| Turquesa              | Inoperacionalidade do PS  |
| Azul                  | Sismo                     |
| Codigo 115            | Vigilante em Apuros       |
|-----------------------+---------------------------|
'
   }

   if [ -z $1 ]; then

      LH="(Pode selecionar varios, isso imprime no terminal)"
      L0="Arco-Iris: Pesquise na Tabela de Codigos: "
      v_separador="|-----------------------+---------------------------|"

      v=$(f_arco | fzf --layout=reverse --no-info -m --header="$LH" --prompt="$L0")
      
      [[ -n $v ]] && echo "Resultados filtrados (arco-iris):" && echo "$v_separador" && echo "$v" && echo "$v_separador"

   elif [ $1 = "." ]; then
      # Imprime so a tabela
      f_arco

   else
      # Se os argumentos forem diferentes do esperado, filtra esse texto do argumento no texto da tabela
      for i in $@;
      do
         f_arco | grep -i "$i"
      done
   fi
}






# Verbose file (variables and outputs)
   # uDev: Cria drya-lib-X para isto
   echo "      File Finished loading: $v_title" >> $v_MSGS
   echo >> $v_MSGS

