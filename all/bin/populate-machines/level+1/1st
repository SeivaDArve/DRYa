#!/bin/bash # Title: Groups of softwares for each situation
# Hint: Use "GETOPTS" in this file just as an exercise
# Use: uDev: Let DRYa source these functions so that the DRYa installed can run the function that installs dependencies


# Help
   # Step 1 (Most Basic) :: You may use this command to FULLY INSTALL the most basic DRYa's functionality:
      # Verbose # clear; echo -e "DRYa: Quick install is starting (3 seconds) \n > Starting: System Update and System upgrade \n > Installing git, ncurses-utils and neofetch \n"; sleep 3;
      # Command # pkg update; yes | pkg upgrade; yes | pkg install git ncurses-utils neofetch;
      # Verbose # echo -e "\n\n - Complete: System Update \n - Complete: System Upgrade \n - Complete: Installing some basic Linux dependencies \n\n - Starting: DRYa download and installation \n\n"; sleep 3;
      # Command # git clone https://github.com/SeivaDArve/DRYa.git $HOME/Repositories/DRYa; cd $HOME; cd Repositories/DRYa/install.uninstall/linux-or-WSL/master-bashrc/; bash 1-installer.sh;
      # Verbose # clear && echo "DRYa: Installation Complete" && echo " > Restart the terminal now (CTRL-D)" 

      # Resumo dos 3 anteriores (sugestao: para copiar o texto por inteiro em 1 so linha, convem abrir este ficheiro apartir do emacs e desativar as info de quebra de linha com a letra 'backslash' '\' com o comando 'M-x dv-truncate-lines-off', com o comando 'M-x visual-line-mode' e com zoom-out para que muito texto caiba dentro de 1 so linha sem quebras forçadas com '\' : 
         clear; echo -e "DRYa: Quick install is starting (3 seconds) \n > Starting: System Update and System upgrade \n > Installing git, ncurses-utils and neofetch \n"; sleep 3; pkg update; yes | pkg upgrade; yes | pkg install git ncurses-utils neofetch; echo -e "\n\n - Complete: System Update \n - Complete: System Upgrade \n - Complete: Installing some basic Linux dependencies \n\n - Starting: DRYa download and installation \n\n"; sleep 3; git clone https://github.com/SeivaDArve/DRYa.git $HOME/Repositories/DRYa; cd $HOME; cd Repositories/DRYa/install.uninstall/linux-or-WSL/master-bashrc/; bash 1-installer.sh; clear && echo "DRYa: Installation Complete" && echo " > Restart the terminal now (CTRL-D)" 

   # Step 2 :: After installing the most basic DRYa and restart the terminal
      # uDev: Call this file and execute one group of instalations. Example: f_gr_soft_DRYa_dependencies


function f_gr_1_installing_terminal {
   # Para DRYa poder funcionar, primeiro precisa de terminal

   # uDev: 
   #        windows:        Instrucoes/Script para Instalar WLS2 + Ubuntu
   #        Android/iPhone: Instrucoes/Links para instalar Termux + Termux:API

   echo "uDev: Instalar terminal Base"
}

function f_gr_2_soft_DRYa_dependencies {
   # Quando DRYa é instalado pela primeira vez, este grupo de dependencias é recomendado instalar

   # Basic dependencies for Default DRYa usage
      pkg install    \
      git            \
      #git-crypt      \ # Pacote externo ao git, que favorece um repositorio com encriptacao
      vim            \  # Editor de Texto do tipo TUI (Terminal User Interface)
      file           \  # Dependency for ezGIT
      man            \  # Usado para ler manuais de instrucoes dos comandos Linux
      which          \  # Used to detect the path of installed scripts
      upower         \  # Usado para ler info de bateria
      fzf            \  # Fuzzyfinder
      ncurses-utils  \  # Instala comandos scripts uteis, por exemplo `tput` 
      bc             \  # Best Calculator. "DRYa" needs it to use `D clc`
      jp2a           \  # Convert jpg images yo ascii
      imagemagick    \  # Can use the command `concert img.png img.jpg` and converts images
      emacs          \  # Poderoso editor de texto e itrepretador de eLisp 
      neofetch

   # Figlet command
      # the APT package manager may not have it,
      # but SNAP package manager may
      # sudo apt install figlet || sudo snap install figlet

      pkg install figlet || snap install figlet

   # Nota: Numa fresh install do OS, podemos por curiosidade, criar um ficheiro com uma variavel (na maquina, host) que informa a idade do OS "OS Age" e depois mencionar as duas variavies "current up-time". Exemplo: comando `trid up-time` que manda o resultado: "OS age: 2 anos"; "Dispositivo ligado ha X dias"
}

function f_gr_hard_dependencies {
   # List of DRYa dependencies (to be installed by DRYa installer)

   pkg install \
   man            # Man pages (it does not come default in arch, for example)
   awk            # Serve para procurar e substituir texto
   figlet         # APT package manager may not have it, but SNAP package manager may have it: sudo snap install figlet
   ncurses-utils  # Instals packages like `tput`
   less           # Dependency for ezGIT
   vim
   file           # Dependency for ezGIT
   gpg            # Encryption/Decryption
   ssh            # Need to connect to raspberry Pi
   sshfs          # Mout ssh as a file system 
   whiptail       # Tool to give GUI menus on Bash
   dialog         # Tool to give GUI menus on Bash (like whiptail but with more options
   man
   which          # Used to detect the path of installed scripts
   tsu            # To grant sudo permissions, may be needed to enable phone screenshots
   upower         # To enable the possibility to read battery status
   fzf            # Fuzzyfinder
   termux-api     # Plug-in for termux
}

# List of usefull apps 
   gh         # for arch is `github-cli`. See f_github_cli 
   dos2unix   # Or DRYa: `dos-2-unix` When editing a file with emacs, it got windows new-line formatation \r and vim was not detecting it. So, when running the file that was actually a .sh script it gave the error "bash line 2: $'\r': command not found" Now, we can either run the command "sed -i 's/\r$//' scriptname.sh" or we can install dos2unix and run "dos2unix scriptname.sh"
   exiftool
   tree
   linx
   emacs
   espeak     # Text to speach
   termimage  # Terminal images
   openssl    # Encryption
   python3
   selenium
   android-tools
   irssi          # IRC client for termux
   youtube-dl
   cmatrix
   syncthing      # To sync files across machines (does not need a cloud, it is decentralized)
   zenity         # Script that prompts the user for info using GUI windows and then returns to the CLI with the array of answers given by clicks
   vim powerline  # Some vim installations have too little info on the status bar
   mpv            # Terminal Media Player (pode precisar da biblioteca 'libxml2': `pkg install libxml2`)
   nodejs         # Node.js for Javascript (sometimes it brings npm (node package manager))
   lf             # Terminal file explorer

function f_github_cli {
   # Software to use github without opening a browser. 
   # Package name in most repos: `gh`
   # Package name in arch repos: `github-cli`

   # Installing on most repos:
      sudo apt install gh

   # Installing on arch repos:
      sudo pacman -S github-cli

   # Creating autintication and login (config git with github)
      gh auth login

   # Creating a new repo (opcao A)
      mkdir nome-do-repo
      cd nome-do-repo
      gh repo create nome-do-repo --source=. --remote=origin

   # Creating a new repo (opcao B, `gh` will create everything)
      gh repo create nome-do-repo --public --clone

}

# installing `mpv` on fedora
   Ao executar `sudo dnf repolist` no fedora linux, tem de aparecer rpmfusion-free e rpmfusion-nonfree.
   Se nao aparecer, tem de ser instalado com:
      `sudo dnf install \
          https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm \
          https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm`

   Depois ja pode instala `mpv` com: `sudo dnf install mpv`
      

# List of usefull apps (python)

   youtube-dl {
      # Software to use at terminal (termux for example) to download from youtube
      # (may need ffmpeg)

      pkg install python
      pip install youtube-dl

      # Quick tutorial how to use {
      #  # Find formats before download
      #     '$ youtube-dl -F <video-url-here>'
      #
      #  # Decide to download format 18
      #     '$ youtube-dl -f 18 <video-url-here>'
      # }
   }





# Instalacoes a mao 
#
# Emacs:
#  `M-x package-install` `dracula-theme`
#
#
#  Vim:
#      ...
#




function f_list_of_usefull_apps_at_WSL2 {
   
   wslview {
      # Binary to open files directly from WSL (windows terminal) like .jpg or .xlsx
      
      sudo apt install wlsu

      # Example: 
         wslview /mnt/c/Repositories/Software-resources/all/icon.png 
   }
}

# For termux, may be needed:
   # uDev: Put these on wikiD
   - termux-info  # Variaveis sobre o termux
   - termux-change-repo
   - termux-setup-storage
   - termux-reload-settings
   - termux-wake-lock; termux-wake-unlock

# May also be very usefull:
   - ROOT smartphone (and create a tutorial)
     > For Samsung A6+ : https://youtu.be/Zm6vh2W4Hxs?si=OHEOzvSZbI0ZxVMU


function f_exec {
   echo "DRYa: file: 1st: Running groups of apps to install"

   # Before format (before DRYa)
      # uDev: Run tutorial how to format a machine
      # uDev: Run tutorial how to create "Ponto de restauro"
      # uDev: Run tutorial how to install WSL2
      # uDev: Run tutorial how to install Windows Terminal
      # uDev: Run tutorial how to install DRYa

   # After DRYa
      f_gr_hard_dependencies
}
f_exec

