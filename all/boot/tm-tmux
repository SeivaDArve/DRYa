#!/bin/bash
# Title: 'tm' script to warp-around tmux and help developers workflow

#examples: 
#   '$ tm s'   (function for sessions)
#   '$ tm w'   (function for windows)
#   '$ tm p'   (function for panes)
#   '$ tm p j' (function no navigate to bottom pane)

# List sessions 
#  tmux list-session
#  tmux list-sessions
#  tmux ls
#  'C-b s'

# Command line (usefull for Tab-Completions)
#  'C-b :'


# Para Absorver: https://www.pluralsight.com/resources/blog/cloud/tmux-cheat-sheet
# Para Absorver: https://gist.github.com/kennyng/816c29eb75e8eb022108
# Para absorver: https://tmuxcheatsheet.com/
# Para absorver: https://youtu.be/nTqu6w2wc68?si=RxAPK4ECmr8lSnEo
# Para absorver: Restore session after reboot: https://youtu.be/Bb5n58JynYQ?si=AX26VpjLgqWwyqbi

function f_session_instructions {
      echo " |  tm S    -------|       | create new session" 
      echo " |  tm S r  -------|       | create new session with name" 
      echo " |  tm s r  -------|       | rename curent session" 
      echo " |  tm s .  -------| C-b s | lists all sessions" 
      echo " |  tm s .. -------|       | toggle with last session" 
      echo " |  tm s a  -------|       | attach session" 
      echo " |  tm s d  -------|       | detach curent session" 
      echo " |  tm s n  -------|       | next session" 
      echo " |  tm s N  -------|       | previous session" 
      echo " |  tm s s <name>  |       | switches to session name 'name' " 
      echo " |  tm s h  -------|       | print instructions only for session commands"
      echo " |  tm s q  -------|       | quits current session" 
      echo " |  tm q    -------|       | Quits/kills all sessions and tmux server" 
      echo 
}

function f_drya_workspace_1 {
   # Criar uma organizacao do tmux de exemplo com:
   #     1. Criar uma nova sessao de tmux com o nome 'D-sess-1'
   #     2. Nessa Sessao, criar uma janela com o nome 'J-1'
   #     3. Nessa janela, criar mais um painel vertical para que fiquem 2.
   #     4. O painel da esquerda vai ter o nome de 'D1' e o painel da direita vai ter o nome de 'D2'
   #     5. Em cada painel, comando diferentes sao executado. Neste caso: `date` e `cal`
   #
   #     Esta fx cria tudo isso no modo "detached", depois entra na sessao "attach"
   

   # Definir o nome de cada elemento dentro do tmux
      local session_name="D-Sess-1"
      local window_name="J-1"
      local left="D1"
      local right="D2"

   # Cria nova sessão desanexada, com nome da sessão e da janela
      tmux new-session -d -s "$session_name" -n "$window_name"

   # Renomeia o painel inicial para D1 (esquerda)
      tmux select-pane -t "$session_name:$window_name.0"
      tmux select-pane -T $left

   # Divide verticalmente e nomeia o novo painel como D2 (direita)
      tmux split-window -h -t "$session_name:$window_name"
      tmux select-pane -T $right

   # Executar comandos nos paineis
      # uDev: O tempo de startup DRYa, se for lento, interfere na introducao destes comandos
      #       Solucao 1. Colocar `sleep 5` nesta fx antes de cada `send-keys`
      #               2. Em 'souce-all-drya-files' manualmente comentar a fx  'f_drya_welcome_screen'
      #               3. Nesta fx, com `sed -i` comentar essa fx de 'souce-all-drya-file' e no final da fx repor como estava

      # Troubleshooting
         sleep 5

      # Executa o comando 'date' no painel D1
         tmux send-keys -t "$session_name:$window_name.0" "date" C-m

      # Executa o comando 'cal' no novo painel D2
         tmux send-keys -t "$session_name:$window_name.1" "cal" C-m

      # Exemplo de temporizar um painel para que se apague ao fim de alguns segundos
         #tmux send-keys -t 1 "sleep 5; tmux kill-pane -t 1" C-m

   # Entra na sessão
      tmux attach -t "$session_name"

}

function f_tmux_panels {
   # Lista de opcoes para o menu `fzf`
      Lz1='Save '; Lz2='tm panels'; Lz3="$Lz1\`$Lz2\`"; Lz4=$v_drya_fzf_menu_hist

      L3='3. Panels | Next pane            | `C-b o`'
      L2='2. Panels | Split pane: Vertical | `C-b %`'

      L1='1. Cancel'

      L0="tm-tmux: menu panels: "
      
      v_list=$(echo -e "$L1 \n\n$L2 \n$L3 \n\n$Lz3" | fzf --no-info --cycle --prompt="$L0")

   # Atualizar historico fzf automaticamente (deste menu)
      echo "$Lz2" >> $Lz4

   # Perceber qual foi a escolha da lista
      [[ $v_list =~ $Lz3  ]] && echo -e "Acede ao historico com \`D ..\` e encontra: \n > $Lz2"
      [[ $v_list =~ "3. " ]] && tmux select-pane -t :.+
      [[ $v_list =~ "2. " ]] && tmux split-window -h  # `Ctrl-b %`
      [[ $v_list =~ "1. " ]] && echo "Canceled: $Lz2" 
      unset v_list
}

function f_tmux_windows {
   # Lista de opcoes para o menu `fzf`
      Lz1='Save '; Lz2='tm windows'; Lz3="$Lz1\`$Lz2\`"; Lz4=$v_drya_fzf_menu_hist

      L3='3.  Windows | Next window | `C-b n`'
      L2='2.  Windows | New window  | `C-b c`'

      L1='1.  Cancel'

      L0="tm-tmux: menu windows: "
      
      v_list=$(echo -e "$L1 \n\n$L2 \n$L3 \n\n$Lz3" | fzf --no-info --cycle --prompt="$L0")

   # Atualizar historico fzf automaticamente (deste menu)
      echo "$Lz2" >> $Lz4

   # Perceber qual foi a escolha da lista
      [[ $v_list =~ $Lz3  ]] && echo -e "Acede ao historico com \`D ..\` e encontra: \n > $Lz2"
      [[ $v_list =~ "3. " ]] && tmux next-window
      [[ $v_list =~ "2. " ]] && tmux new-window
      [[ $v_list =~ "1. " ]] && echo "Canceled: $Lz2" 
      unset v_list
    

}

function f_tmux_sessions {
   # Lista de opcoes para o menu `fzf`
      Lz1='Save '; Lz2='tm sessions'; Lz3="$Lz1\`$Lz2\`"; Lz4=$v_drya_fzf_menu_hist

       L6='6. DRYa    | Criar um worspace (nr.1)'

       L5='5. Session | Detach Session'
       L4='4. Session | Attach Session'
       L3='3. Session | Kill tmux session'
       L2='2. Session | Open tmux session'

       L1='1.  Cancel'

      L0="tm-tmux: menu sessions: "
      
      v_list=$(echo -e "$L1 \n\n$L2 \n$L3 \n$L4 \n$L5 \n\n$L6 \n\n$Lz3" | fzf --no-info --cycle --prompt="$L0")

   # Atualizar historico fzf automaticamente (deste menu)
      echo "$Lz2" >> $Lz4

   # Perceber qual foi a escolha da lista
      [[ $v_list =~ $Lz3  ]] && echo -e "Acede ao historico com \`D ..\` e encontra: \n > $Lz2"
      [[ $v_list =~ "6. " ]] && f_drya_workspace_1
      [[ $v_list =~ "5. " ]] && tmux detach-client
      [[ $v_list =~ "4. " ]] && tmux a
      [[ $v_list =~ "3. " ]] && tmux kill-server && echo "tm-tmux: all sessions (and server) killed"
      [[ $v_list =~ "2. " ]] && tmux
      [[ $v_list =~ "1. " ]] && echo "Canceled: $Lz2" 
      unset v_list
    
}

function tm {
   if [ -z $1 ]; then

   # Lista de opcoes para o menu `fzf`
      Lz1='Save '; Lz2='tm'; Lz3="$Lz1\`$Lz2\`"; Lz4=$v_drya_fzf_menu_hist

      L11='11. DRYa | Criar um worspace (nr.1) | `tm wr 1`'

      L10='10. Menu | Panes    | `tm p`'
       L9='9.  Menu | Windows  | `tm w`'
       L8='8.  Menu | Sessions | `tm s`'

       L7='7.  CMD           | Open command line | `C-b :`'
       L6='6.  CMD (session) | Detach Session'
       L5='5.  CMD (session) | Attach Session'
       L4='4.  CMD (session) | Kill tmux session'
       L3='3.  CMD (session) | Open tmux session'

       L2='2.  Help'
       L1='1.  Cancel'

      Lh="Note: Probably at DRYa, the shortcut is 'C-x' instead of 'C-b'"
      L0="tm-tmux: menu: "
      
      v_list=$(echo -e "$L1 \n$L2 \n\n$L3 \n$L4 \n$L5 \n$L6 \n$L7 \n\n$L8 \n$L9 \n$L10 \n\n$L11 \n\n$Lz3" | fzf --no-info --cycle --header="$Lh" --prompt="$L0")

   # Atualizar historico fzf automaticamente (deste menu)
      echo "$Lz2" >> $Lz4

   # Perceber qual foi a escolha da lista
      [[ $v_list =~ $Lz3   ]] && echo "$Lz2" && history -s "$Lz2"
      [[ $v_list =~ "11. " ]] && f_drya_workspace_1
      [[ $v_list =~ "10. " ]] && f_tmux_panels 
      [[ $v_list =~ "9.  " ]] && f_tmux_windows
      [[ $v_list =~ "8.  " ]] && f_tmux_sessions
      [[ $v_list =~ "7.  " ]] && tmux command-prompt
      [[ $v_list =~ "6.  " ]] && tmux detach-client
      [[ $v_list =~ "5.  " ]] && tmux a
      [[ $v_list =~ "4.  " ]] && tmux kill-server && echo "tm-tmux: all sessions (and server) killed"
      [[ $v_list =~ "3.  " ]] && tmux
      [[ $v_list =~ "2.  " ]] && f_session_instructions
      [[ $v_list =~ "1.  " ]] && echo "Canceled: $Lz2" 
      unset v_list
    

   elif [ $1 == "n" ]; then
      # Open new session
      tmux

   elif [ $1 == "k" ]; then
      tmux kill-server && echo "tm-tmux: all sessions (and server) killed"
   
   elif [ $1 == "d" ]; then
      # Detach session
      tmux detach-client
   
   elif [ $1 == "a" ]; then
      # Attach session
      tmux a

   elif [ $1 == "s" ] || [ $1 == "sessions" ]; then
      # Menu with options for sessions
      f_tmux_sessions

   elif [ $1 == "w" ] || [ $1 == "windows" ]; then
      # Menu with options for windows
      f_tmux_windows

   elif [ $1 == "p" ] || [ $1 == "panels" ]; then
      # Menu with options for paineis
      f_tmux_panels

   elif [ $1 == "wr" ]; then
      # opcoes para Wprkspaces para DRYa

      if [ -z $2 ]; then
         echo "tm-tmux: Qual é o numero do layput de workspace que pretende? Tem de fornecer um numero"

      elif [ $2 == "1" ]; then
         # uDev: Antes de criar o workspace, verbosamente descrever todo o workspace e perguntar se quer continuar...
         f_drya_workspace_1
      fi

   elif [ $1 == "h" ]; then
      echo "tmux: uDev list"
      echo 
      echo " |  tm h    -------| prints this message" 
      echo " |  tm :    -------| tmux command line (helps with completions)" 
      echo 
      echo " Mais info na repo wikiD" 

      f_session_instructions

   else
      echo "tm-tmux: opcao nao reconhecida"
   fi
}
