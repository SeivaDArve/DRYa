#!/bin/bash
# Title: source-all-drya-files
# Description: 1st DRYa file to run. This Initializes all other apps and initiate persistent functions
  v_title_drya="source-all-drya-files"  # Name of this file

# uDev: PUT EVERYTHING INSIDE FUNCTIONS AND CREATE f_exec AT THE END

# -------------------------------------------------------
# Reserved alias/variables for DRYa
# uDev: init-bin: fluNav: app que usa apenas o numpad para TUDO no pc, navegacao, menus... TUDO...
#
# 2468   = DRYa app ------------------------------- (bash ~/Repositories/DRYa/drya.sh)
# 24685  = DRYa's Repository Center --------------- (cd ~/Repositories)
# 246851 = Move to DRYa directory ----------------- (cd ~/Repositories/DRYa/)
# 246852 = Move to DRYa's most usefull parallel app (cd ~/Repositories/ezGIT/)
# 24681  = DRYa's function 1 (Currently: menu 1)
# 24682  = DRYa's function 2 (Currently: menu 2)
# 246811 = DRYa Refresh ALL (just like F5 does + refresh dot-files)
#
# -------------------------------------------------------

function f_drya_msgs_init {
   # drya-messages: Verbose file (variables and outputs)
      echo "DRYa: File started loading: DRYa's $v_title_drya"
      echo "      > $v_title_drya 1st File to load, after ~/.bashrc redirection"
      echo "      > running from: ${DRYa_HEART}"
      # udev: echo "Installed at.."

# drya-messages: | 1. A file like neofetch for DRYa
# > drya -m      | 2. Place in this file all script you need ~/.bashrc to recognize
#                     At ~/.bashrc you should place only ONE line to source this file for DRYa, and this file should source all others
#                | 3. We cannot run this command because variable is not defined yet): echo "file: source-all-drya-files: first line" >> $DRYa_MESSAGES

# drya-plus:     | 1. Instead of printing a lot of text on the Termux welcoke screen, lets hide under the function: drya +
#  > drya +      | 2. It has: DRYa welcome message, termux welcome message (if running on Android). Neofetch. More info

# drya-info      | 1. It's Neofetch-like info retrieved by DRYa
#                | 2. It sets variables too like: 'drya --os' (for operative system)

}  >> $v_MSGS 2>/dev/null


# uDev: $HOME on WSL2 must go to $HOME on windows

# uDev: Function f_talk should be sourced here to enable it to be used across the system
# uDev: also source f_horizontal_line
# uDev: if doom emacs is installed, export it's PATH
# uDev: set raspberry pi Screen Resolution (when using "Silver" TV) for: 1360x768
# uDev: Set windows time and date automaticaly with batch scripts
        # Paste "w32tm /resync" inside a cmd with admin privileges to sync time and date

function f_traitsID {
   # Getting info about the machine

   # uDev: Send this to .../DRYa/all/bin/init-bin/traitsID.sh

   # Clear the file with all the outputs of traitsID (it is created anew every single time DRYa is loaded on a terminal)
      v_dir=~/.config/h.h/drya/
      v_file="traitsID"
      v_id_file="${v_dir}${v_file}"

      mkdir -p $v_dir

   # Create the file from scrarch at every terminal startup
      rm $v_id_file 2>/dev/null
      touch $v_id_file

      alias tid="less $v_id_file"

   # Using command 'uname'
      v_uname=$(uname -a)

   # Filter the info to Detect OS
   # SIGLA for $v_arr1: tid:A???? (A)ndroid (Wi)ndows (L)inux (R)aspberry (U)nknown

      if [[ $v_uname =~ "Android" ]]; then 
         echo "DRYa: Running on: Android"
         echo 'v_OS="Android"' >> $v_id_file 
         v_arr1=A
         
      elif  [[ $v_uname =~ "Microsoft" ]]; then 
         echo "DRYa: Running on: Windows"
         echo 'v_OS="Windows"' >> $v_id_file
         v_arr1=W

      elif [[ $v_uname =~ "raspberrypi" ]]; then 
         # Linux has to be the last one, because it means Windows and Android are not present
         echo "DRYa: Running on: Linux (Raspberry Pi)"
         echo 'v_OS="Linux-Rasp"' >> $v_id_file
         v_arr1=R

      elif [[ $v_uname =~ "Linux" ]]; then 
         # Linux has to be the last one, because it means Windows and Android are not present
         echo "DRYa: Running on: Linux"
         echo 'v_OS="Linux"' >> $v_id_file
         v_arr1=L

      else
         echo "DRYa: Running on: NOT DETECTED"
         v_arr1=U
      fi 

      # Display a way to reach the info
         echo "      > view traitsID with: 'tid' "


      # Create a single string with all info (as a code):
         declare -a v_tid=(
            [0]="tid="
            [1]=$v_arr1
         )
         echo "${v_tid[0]}${v_tid[1]}" >> $v_id_file

      # Create a script at DRYa/all/bin/ for drya-neofetch
         # uDev: Create the same for Device: Samsung, TLC, Lenovo, Azus (drya will need a .config for this, and needs the user to answer a script)
         # uDev: Detecte personal/safe device from job/public/unsafe device
         # uDev: Create the same for package manager: apt, pacman, dnf, pkg
         # uDev: Create the same for processor: ARM, 64 Bits, 32 Bits (Raspberry pi?)
         # uDev: Create a binary for each combination: 00101: pacman, lenovo, windows, userX
         # uDev: Create environment variables: drya-env-os; drya-env-me (for command whoami); etc
         # uDev: Versao do Linux (para config do teclado)
            #which yum >/dev/null && { echo Fedora flavour; exit 0; }
            #which zypper >/dev/null && { echo Suse of sorts; exit 0; }
            #which apt-get >/dev/null && { echo Debian based;  }
      # Detect wifi not connected networks due to lack of passaword and chech our list of wifi passwords to see if we can log on it

   # Source file After writting with all variables for traitsID
      source $v_id_file
}


function f_dv_PS1 {
   # Defining the favourite Terminal PS1 variable:

   PS1='\[\e[0;32m\]\w\[\e[0m\] \[\e[0;97m\]\$\[\e[0m\] '
   #echo
   echo "DRYa: PS1 defined as per the user Dv"
   echo
   # uDev: whenever a mew PS1 variable is defined, send the old one to ~/.config/h.h/drya/...
   # uDev: Create alias to define diferent PS1's
}  >> $v_MSGS


function f_drya_msgs_welcome {
      echo
      echo "DRYa: Note about verbose outputs (welcome screen helper):"
      echo " 1: Find verbose output (all seiva apps included) at:"
      echo "    > $v_MSGS"
      echo "      > path stored as variable: '\$v_MSGS'"
      echo
      echo " 2: You can also send text to: '\$v_MSGS' example:"
      echo "    > $ echo \"Example-App: Hi there\" >> \$v_MSGS"
      echo
      echo " 3: Read the messages with command:"
      echo "    > drya + msgs"
      echo
}  >> $v_MSGS 2>/dev/null

function f_drya_msgs {
   # Configuring variable for DRYa messages
      mkdir -p ~/.config/h.h/drya/

      v_MSGS="$HOME/.config/h.h/drya/drya-msgs"
      export v_MSGS
      echo -e "# Title: DRYa Messages (verbose output for apps under DRYa)" > ~/.config/h.h/drya/drya-msgs
      echo -e "# Messages started at: $(date) \n" >> ~/.config/h.h/drya/drya-msgs

      # Message "First file to load":
         f_drya_msgs_init

      # Message to be sent to the welcome screen (optional)
         f_drya_msgs_welcome

}

function f_termux_welcome {
   # Display the standard welcome termux message
      # uDev: WSL2 also has a welcome message that runs only once a day. Let's capture it too
      # Testing with the command 'uname -o' where the output should be "Android" to see if the termux is the terminal running
      # Also sending the error message to /dev/null in case dWiki repository is not yet downloaded side-by-side with DRYa
      if [ $(uname -o) == "Android" ]; then echo "DRYa: Termux welcome message:"; cat ${v_REPOS_CENTER}/dWiki/termux/default-welcome-screen-text 2>/dev/null; fi
}

function f_neofetch {
   # Neofetch is not needed... It is just for fun
      neofetch 2>/dev/null
}
   
function f_test_1 {
   alias test1="echo test about sourcing alias inside functions also work"
}

function f_drya_plus {
   # In order to uncluter the welcome screen, we use this function
      # Building '$ drya +' command used on the welcome screen
      # uDev: send to drya-messages too
      # uDev: set function: drya --os (traitsID info)
      # uDev: set environment variable: drya-os to be used by other functions like '$ op'
      
      # uDev: Ask if the user want to see more than just the OS that is running
      # uDev: Make ezGIT ask if the user wants: G v all
      
   # List and execution of function under drya_plus:
      #echo
      echo "      > view more DRYa options with: 'drya help' "
      echo
      f_drya_msgs
      f_dv_PS1
      #f_termux_welcome
      f_neofetch
      f_test_1
   
}


function f_pre_help {
   # Count number of lines in the terminal:
      v_tLines=$(stty size | cut -d ' ' -f 1)
      #echo "current number of lines in the terminal is: $v_tLines"

   # Dividing that number into 2
      v_half_tLines=$(expr $v_tLines / 2)
      #echo "Half of that is (rounded number): $v_half_tLines"

   # And the into 2
      v_half_half_tLines=$(expr $v_half_tLines / 2)

   # Creating a message at the center of the screen
      v_preMSGS="$HOME/.config/h.h/drya/drya-pre-msgs"
      echo " " > $v_preMSGS

      for i in $(seq 1 $v_half_half_tLines)
      do
         echo -e "\n" >> $v_preMSGS
      done

      echo -e "DRYa messages will be presented \n > Press Q to quit these menus" >> $v_preMSGS
}


function f_internal_drya_files_1_2 {
# Repository: DRYa (internal files - (1/2) )

   # Abreviated REPOS CENTER variable (for easier terminal use)
      alias 24685="cd ${v_REPOS_CENTER} && ls"

   # Add script drya.sh to PATH variable (try: echo $PATH) 
      export PATH=$PATH:${v_REPOS_CENTER}/DRYa

   # Display info about it at the screen when DRYa is loaded by the terminal
      # Presenting it with figlet (which is a dependency) or just echo it's name:
         bash ${v_REPOS_CENTER}/DRYa/all/bin/drya-presentation.sh || echo "DRYa: Don't Repeat Yourself (app)"  # In case figlet or tput are not installed, echo only "DRYa" instead

}



function f_config_figlet {
   # Configuration for dependency: figlet

   # Not every instalation of figlet comes with the same standard font, lets corret that
   alias figlet="figlet -f standard.flf" # My favourite font is called standard.flf ## CAREFULL, this font may be missing
}

function f_repository_dWiki {
   # Repository: dWiki

   alias dwiki="bash ${v_REPOS_CENTER}/dWiki/dwiki.sh"
      alias dw="dwiki"
      
   # App under TODO-apps:
      alias satisfaz="bash ${v_REPOS_CENTER}/dWiki/TODO-apps/satisfaz.sh"
}

function f_repository_QR-walking-stick {
   # Repository: QR-walking-stick (inside dWiki/TODO-apps)

   alias qr="bash ${v_REPOS_CENTER}/dWiki/TODO-apps/QR-walking-stick/store-data-from-QRcodeApp.sh"
}

function f_repository_scratch-paper {
   # Repository: scratch-paper

   alias Qsend="bash ${v_REPOS_CENTER}/scratch-paper/quick-sender.sh"
}

function f_repository_ezGIT {
   # Repository: ezGIT

   # Define a key to call the entire program
      alias G="bash ${v_REPOS_CENTER}/ezGIT/ezGIT.sh"
      # uDev: for some repos, must run a script that searches for updates at terminal startup

   # Load all alternative git alias:
      source ${v_REPOS_CENTER}/ezGIT/all/etc/config-bash-alias 2>/dev/null  # Sendinf to dev null because ezGIT may not be installed yet

   #uDev: #bash ezGIT/all/bin/automatic uploader for repos like "omni-log-Dv" that are meant to be ALWAYS in the "cloud" uDev: this script will run at terminal startup and will upload+download a list of file always.
   #uDev: #for messenger-like comunications: download+upload content for a private github repo and after the other mobile phone downloads it, use git to remove it from the git log permanently
}
   
function f_repository_wikiD {
  alias wikiD="echo 'wikiD will open in a browser (uDev)'; echo ' > To edit the file, use: F wd'"
}

function f_repository_moedaz {
   # Repository: moedaz

   # uDev: Put all files to be open under menuFAV F   
   alias mo="bash ${v_REPOS_CENTER}/moedaz/moedaz.sh" ## Exists inside the file 'source-all-moedaz-files'
   alias todo="bash ${v_REPOS_CENTER}/moedaz/moedaz.sh todo"  # Tambem esta presente em: source-all-moedaz-files
   source ${v_REPOS_CENTER}/moedaz/all/source-all-moedaz-files 2>/dev/null
   source ~/.config/h.h/moedaz/terminal-text-color 2>/dev/null
}

function f_repository_upK {
   # Repository: upK 

   source ${v_REPOS_CENTER}/upK/all/bin/bash/time.sh 2>/dev/null

   # Open with github sync
   alias upk="bash ${v_REPOS_CENTER}/upK/upk.sh"
      alias Upk="upk" # Same as previous alias but with capital letter for fast call at termux startup
      alias UPK="upk" # Same as previous alias but with capital letter for fast call at termux startup


   # uDev: alias "upk dia"="...upk-diario-Dv"
   # NOTE: reporiory "upk" when called on the terminal without argument, it will call "upK-diario-Dv" if existent
}

function f_repository_upK-diario-Dv {
   # Repository: upK-diario-Dv

   # Open without github sync
      # Note: It is recommended not to open this way since the alias "upk" with no arguments will open this file already git pulling info first and git pushing info afterwards
      alias upk-dv="bash ${v_REPOS_CENTER}/upK-diario-Dv/upk.sh" 
}

function f_repository_112-Shiva-Sutras {
   # Repository: 112-Shiva-Sutras

   alias ss="bash ${v_REPOS_CENTER}/112-Shiva-Sutras/ss.sh"
   alias SS="ss all | less"
   alias ss.="vim ${v_REPOS_CENTER}/112-Shiva-Sutras/ss.sh"
   alias exp="vim ${v_REPOS_CENTER}/112-Shiva-Sutras/exp112.txt"
   alias links="EM ${v_REPOS_CENTER}/112-Shiva-Sutras/all/internal-docs/Nithyananda-links-compilation.org; echo 'Shiva Sutras links file edited'" # To temporarily help the developer of this file acessing it

}

function f_repository_yogaBashApp {
   # Repository: yogaBashApp

   alias sadhguru-presence="${v_REPOS_CENTER}/yogaBashApp/sadhguru-presence.sh"
   alias termux-stop="termux-media-player stop"
   alias shambavi="${v_REPOS_CENTER}/yogaBashApp/shambavi.sh"
   source ${v_REPOS_CENTER}/yogaBashApp/all/source-all-yoga-files 2>/dev/null
}

function f_repository_row-reader {
   # Repository: row-reader

   alias rr="bash ${v_REPOS_CENTER}/row-reader/row-reader.sh"
}

function f_repository_omni-log {
   # Repository: omni-log

   # If windows with graphical interface is available, we will prefer that to the terminal version

   # Using command 'log' to open our file
   function om {
      
      # Defining the name of the file as a variable
         v_dir="${v_REPOS_CENTER}/omni-log/"
         v_file="multiplex.org "
         v_choosen_file="${v_REPOS_CENTER}/omni-log/multiplex.org "

      if [ -f /mnt/c/Program\ Files/Emacs/x86_64/bin/emacs.exe ]; then
         # if .exe is found, open GUI emacs on windows:
            clear
            figlet "omni-log"

            echo "DRYa: Opening file (in GUI windows):"
            echo " > $v_choosen_file"
            echo
            echo "Is file going to sync with github? (No)"; sleep 2

            cd $v_dir && /mnt/c/Program\ Files/Emacs/x86_64/bin/emacs.exe $v_file 
               echo -e "... File closed\n" 
               cd ${v_REPOS_CENTER}/omni-log

      else
         # Otherwise, open emacs in terminal:
            echo "Drya: Opening file (in Terminal Linux):"
            echo " > $v_choosen_file"
            echo
            echo "Is file going to sync with github? (No)"; sleep 2

            emacs $v_choosen_file 
               echo -e "... File closed\n"  
               cd ${v_REPOS_CENTER}/omni-log
      fi
   }
   alias Om="om"  ## Alow capital letters too
   alias OM="om"  ## Alow capital letters too
}

function f_internal_drya_files_2_2 {
   # Repository: DRYa (internal files - (2/2) )

   # Remove temporary dir created by DRYa's other scripts
      rm -rf ~/.tmp/

   # Sourcing DRYa's own configs
      source ${v_REPOS_CENTER}/DRYa/all/etc/config-bash-alias
      alias ,.="vim ${v_REPOS_CENTER}/DRYa/all/etc/config-bash-alias"
      alias ,..="vim ${v_REPOS_CENTER}/DRYa/all/source-all-drya-files"

   # DRYa executable
      alias drya="bash ${v_REPOS_CENTER}/DRYa/drya.sh"
      alias D="bash ${v_REPOS_CENTER}/DRYa/drya.sh"

      alias Dd="cd ${v_REPOS_CENTER}/DRYa && ls"
      alias DD="cd ${v_REPOS_CENTER}/DRYa && ls"
   
   # Drya bin files
      # Sourcing all stand-alone scripts
         # uDev: tell $v_MSGS the 'ls' found at 'bin/init-bin/"
         v_list_of_scripts=$(ls ${v_REPOS_CENTER}/DRYa/all/bin/init-bin/)
         echo -e "\nDRYa: List of scripts found in: \n > .../DRYa/all/bin/init-bin/ \n$v_list_of_scripts \n > Let's try to source all of them... \n" >> $v_MSGS

         for i in $(ls ${v_REPOS_CENTER}/DRYa/all/bin/init-bin/)
         do 
            source ${v_REPOS_CENTER}/DRYa/all/bin/init-bin/$i 1>/dev/null && echo "Sorced $i" >> $v_MSGS
         done 

      # Sourcing a specific list of scripts
         alias master-emacs="${v_REPOS_CENTER}/DRYa/all/bin/master-emacs.sh"

   # Sourcing the temporary local configs for DRYa (if they do not exist, send err: /dev/null)) It can store temporary variables for debugging process of some app
      source ~/.config/h.h/drya/.dryarc 2>/dev/null

   # Sourcing config files stored inside DRYa repo created by other machines running DRYa
      source ${v_REPOS_CENTER}/DRYa/all/var/appended-from-dryarc 2>/dev/null
}

function f_verbose_drya_msgs_end_file {
   # drya-messages: Verbose file (variables and outputs)

   echo "DRYa: File ended loading: DRYa's $v_title_drya" >> $v_MSGS

   # Read messages file before normal tasks
      # Creating a pre warning and reading it
         #f_pre_help; less $v_preMSGS

      # Reading the actuall messages
         #less $v_MSGS

      # Merging last 2 commands into one (called only by the user, to avoid dumping spam on the screen)
         alias dmsgs="f_pre_help; less $v_preMSGS; less $v_MSGS"
}

function f_exec { 
   f_drya_msgs
   f_internal_drya_files_1_2
   f_drya_msgs_init   >> $v_MSGS 2>/dev/null
   f_traitsID
   f_dv_PS1   >> $v_MSGS
   f_drya_msgs_welcome   >> $v_MSGS 2>/dev/null
   #f_termux_welcome
   #f_neofetch
   f_test_1  # Can be deleted

   f_drya_plus  ## Turno ON/OFF for verbose welcome screen output. # Re-directing too much output at the welcome screen for the choice of the user either to see it or not
   #f_pre_help
   f_config_figlet

   # Loading repositories
      f_repository_dWiki   
         f_repository_QR-walking-stick  # (inside dWiki/TODO-apps)
      f_repository_scratch-paper 
      f_repository_ezGIT   
      f_repository_wikiD
      f_repository_moedaz  
      f_repository_upK  
      f_repository_upK-diario-Dv 
      f_repository_112-Shiva-Sutras
      f_repository_yogaBashApp
      f_repository_row-reader
      f_repository_omni-log

   f_internal_drya_files_2_2
   f_verbose_drya_msgs_end_file
}
f_exec

