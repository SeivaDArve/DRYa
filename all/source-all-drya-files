#!/bin/bash
# Title: source-all-drya-files
# Description: This file is the 1st DRYa's file to run. This Initializes all other apps and initiate persistent functions



# uDev: $HOME on WSL2 must go to $HOME on windows
# uDev: Function f_talk should be sourced here to enable it to be used across the system
# uDev: if doom emacs is installed, export it's PATH
        # Paste "w32tm /resync" inside a cmd with admin privileges to sync time and date

function f_startup_escape_time {
   # Function with the timer of 1 second, to allow the chance of the user to avoid DRYa to start loading

   read -s -n 1 -t 1
}

function f_basic_variables {
   # Include this file name in a variable
     v_title_drya="source-all-drya-files"

   # Demi-fake pin for fzf menus (scare away curious people)
     v_pin=0000

   # Clipboard for DRYa: drya-clipboard (send to this file, only absolute paths to files and directories, for now)
      v_clip=~/.config/h.h/drya/drya-clipboard  &&  touch $v_clip && export v_clip

   # Sound effects:
      v_snd=${v_REPOS_CENTER}/DRYa/all/etc/sounds

      v_snd_1=$v_snd/example-sound-completion-bell.wav
      v_snd_2=$v_snd/DBZ-Instant_Transmission.wav 
}


function f_drya_msgs_init {
   # drya-messages: Verbose file (variables and outputs)
      echo "DRYa: Sub-Operative System"
      echo " > $v_title_drya 1st File to load, after ~/.bashrc redirection"
      echo " > running from: ${DRYa_HEART}"
      echo " > drya-msgs file located at: $v_MSGS"
      # udev: echo "Installed at.."


   # drya-messages: | 1. A file like neofetch for DRYa
   # > drya -m      | 2. Place in this file all script you need ~/.bashrc to recognize
   #                     At ~/.bashrc you should place only ONE line to source this file for DRYa, and this file should source all others
   #                | 3. We cannot run this command because variable is not defined yet): echo "file: source-all-drya-files: first line" >> $DRYa_MESSAGES

   # drya-plus:     | 1. Instead of printing a lot of text on the Termux welcoke screen, lets hide under the function: drya +
   #  > drya +      | 2. It has: DRYa welcome message, termux welcome message (if running on Android). Neofetch. More info

   # drya-info      | 1. It's Neofetch-like info retrieved by DRYa
   #                | 2. It sets variables too like: 'drya --os' (for operative system)

}  >> $v_MSGS 2>/dev/null


function f_traitsID {
   # Deteta variaveis de sistema (software e hardware). Permitir a DRYa que se torne cross-platform, adaptando-se ao dispositivo em que está instalada e sabe o que fazer de acordo com esse sistema

   # Este ficheiro é lido 2x em:
   #   1. A pasta onde pertence (.../init-bin/) é de ficheiros que sao sempre lidos no arranque do terminal
   #   2. Também lido aqui porque tem de ser o primeiro de todos a ser lido

   # Nome do ficheiro e ver se ele existe
      v_dir="${v_REPOS_CENTER}/DRYa/all/bin/init-bin"
      v_file="traitsID.sh"

      traits_file="$v_dir/$v_file"
      traits_0="Source-of-traitsID-script::$traits_file"  # Na versao atual de bash, não da para exportar arrays, será usado um metodo mais arcaico

      if [[ -f $traits_file ]]; then
         export traits_file
         export traits_0    # Igual a $traits_file mas com numero do ID
      fi

   source $traits_file # 1>/dev/null && echo "Sorced $i" >> $v_MSGS

   # Debug
      #source ${v_REPOS_CENTER}/DRYa/all/bin/init-bin/traitsID.sh 1>/dev/null && echo "Sorced $i" >> $v_MSGS
}


function f_dv_PS1 {
   # Defining the favourite Terminal PS1 variable:
   # uDev: whenever a mew PS1 variable is defined, send the old one to ~/.config/h.h/drya/...

   echo "DRYa: PS1 defined as per the user Dv"
   echo -n " > Last PS1: "
   echo    "$PS1"

   PS1='\[\e[0;32m\]\w\[\e[0m\] \[\e[0;97m\]\$\[\e[0m\] '

   echo -n " > New  PS1: "
   echo    "$PS1"
   echo

}  >> $v_MSGS


function f_drya_msgs_welcome {
      echo
      echo "DRYa: Note about verbose outputs (welcome screen helper):"
      echo " 1: Find verbose output (all seiva apps included) at:"
      echo "    > $v_MSGS"
      echo "      > path stored as variable: '\$v_MSGS'"
      echo
      echo " 2: You can also send text to: '\$v_MSGS' example:"
      echo "    > $ echo \"Example-App: Hi there\" >> \$v_MSGS"
      echo
      echo " 3: Read the messages with command:"
      echo "    > drya + msgs"
      echo
}  >> $v_MSGS 2>/dev/null

function f_drya_msgs {
   # File to dump/redirect verbobe output (from 'standard in' to file 'drya-messages')

   # Configuring variable for DRYa messages
      v_cfg="$HOME/.config/h.h/drya"  &&  mkdir -p $v_cfg
      v_name="drya-msgs"
      v_MSGS="$v_cfg/$v_name"  &&  export v_MSGS

   # Populating file with standard text
      v_text1="# Title: DRYa Messages (verbose output for apps under DRYa)"
      v_text2="# Messages started at: $(date) \n"

      echo -e "$v_text1" >  $v_MSGS
      echo -e "$v_text2" >> $v_MSGS

   # Message "First file to load":
      f_drya_msgs_init

   # Message to be sent to the welcome screen (optional)
      f_drya_msgs_welcome

   # Set an alias to watch changes to the file live

   # Read messages file before normal tasks
      # Creating a pre warning and reading it
         #f_any_key_b4_open_msgs; less $v_preMSGS

      # Reading the actuall messages
         #less $v_MSGS

      # Merging last 2 commands into one (called only by the user, to avoid dumping spam on the screen)
         #alias dmsgs="f_any_key_b4_open_msgs; clear; cat $v_preMSGS; read -sn1 -t 5; less $v_MSGS"
         alias dmsgs="less $v_MSGS"
}

function f_termux_welcome {
   # Display the standard welcome termux message
      # uDev: WSL2 also has a welcome message that runs only once a day. Let's capture it too
      # Testing with the command 'uname -o' where the output should be "Android" to see if the termux is the terminal running
      # Also sending the error message to /dev/null in case dWiki repository is not yet downloaded side-by-side with DRYa
      if [ $(uname -o) == "Android" ]; then echo "DRYa: Termux welcome message:"; cat ${v_REPOS_CENTER}/dWiki/termux/default-welcome-screen-text 2>/dev/null; fi
}

function f_neofetch {
   # Neofetch is not needed... It is just for fun. And if it does not exist, do not print it's error message
   neofetch 2>/dev/null
}
   
function f_test {
   alias test1='echo "Testing sourcing alias inside functions, result: also works!"'
}

function f_drya_plus {
   # In order to uncluter the welcome screen, we use this function
      # Building '$ drya +' command used on the welcome screen
      # uDev: send to drya-messages too
      # uDev: set function: drya --os (traitsID info)
      # uDev: set environment variable: drya-os to be used by other functions like '$ op'
      
      # uDev: Ask if the user want to see more than just the OS that is running
      # uDev: Make ezGIT ask if the user wants: G v all
      
   # List and execution of function under drya_plus:
      #echo
      echo "      > view more DRYa options with: 'drya help' "
      echo "      > DRYa extended menu with fzf: 'D +'"
      f_drya_msgs
      f_dv_PS1
      #f_termux_welcome
      #f_neofetch
      f_test
   
}

function f_any_key_b4_open_msgs {
   # Centering text in the middle of the terminal
   # --- Before opening drya-messages `dmsgs`
   # --- making the user press Any Key
  

   # uDev: use drya-lib-1 to: Center text Horizontally + vertically


   # Creating a message at the center of the screen
      v_preMSGS="$HOME/.config/h.h/drya/drya-pre-msgs"
      echo > $v_preMSGS  # Reseting the file text


   # Message to output: 
      v_msg_1="DRYa messages will be presented"
      v_msg_2=" > Press Q to quit these menus"


   # Contar o numero de letras da variavel maior:
      v_char=${#v_msg_1}
      

   # uDev: use drya-lib-1 to: Center Horizontally + vertically
      #echo "$v_empty_lines   " >> $v_preMSGS
      #echo "${v_cols}$v_msg_1" >> $v_preMSGS
      #cat $v_preMSGS
}

function f_internal_drya_files_1_of_2 {
   # Repository: DRYa (internal files - (1/2) )

   # Acessos a ficheiros (mesmo que um bug impeca este ficheiro de ser completamente lido, estas alias permitem aceder aos ficheiros)
      alias  ,.="vim ${v_REPOS_CENTER}/DRYa/all/etc/config-bash-alias"  # Iniciado mais a frente em f_internal_drya_files_2_of_2
      alias ,..="vim ${v_REPOS_CENTER}/DRYa/all/source-all-drya-files"

   # Abreviated numpad alias to list REPOS CENTER directory (for easier terminal use)
      alias 00="cd ${v_REPOS_CENTER} && ls"

   # Add script drya.sh to PATH variable (try: echo $PATH) 
      export PATH=$PATH:${v_REPOS_CENTER}/DRYa
      export PATH=$PATH:${v_REPOS_CENTER}/DRYa/all/bin  # Any file placed here, is executed automaticaaly on the terminal by calling it by the name

   # Display info about it at the screen when DRYa is loaded by the terminal
   # --- Presenting it with figlet (which is a dependency) or just echo it's name:
      bash ${v_REPOS_CENTER}/DRYa/all/bin/drya-presentation.sh || echo "DRYa: Don't Repeat Yourself (app)"  # In case figlet or tput are not installed, echo only "DRYa" instead
}

function f_config_figlet {
   # Configuration for dependency: figlet

   # Not every instalation of figlet comes with the same standard font, lets corret that
   alias figlet="figlet -f standard.flf" # My favourite font is called standard.flf ## CAREFULL, this font may be missing
}

function f_repository_dWiki {
   # Repository: dWiki

   alias dwiki="bash ${v_REPOS_CENTER}/dWiki/dwiki.sh"
      alias dw="dwiki"
      
   # App under TODO-apps:
      alias satisfaz="bash ${v_REPOS_CENTER}/dWiki/TODO-apps/satisfaz.sh"
}

function f_repository_scratch-paper {
   # Repository: scratch-paper

   alias Qsend="bash ${v_REPOS_CENTER}/scratch-paper/quick-sender.sh"
}

function f_repository_ezGIT {
   # Repository: ezGIT

   # Define a key to call the entire program
      alias ezGIT="bash ${v_REPOS_CENTER}/ezGIT/ezGIT.sh"
      alias ezgit="bash ${v_REPOS_CENTER}/ezGIT/ezGIT.sh"
      alias     G="bash ${v_REPOS_CENTER}/ezGIT/ezGIT.sh"
      alias  GvA.="bash ${v_REPOS_CENTER}/ezGIT/ezGIT.sh v A ."  # This alias is meant to help drya-termux-omni-key to call this script
      # uDev: for some repos, must run a script that searches for updates at terminal startup

   # Load all alternative git alias:
      source ${v_REPOS_CENTER}/ezGIT/all/etc/config-bash-alias 2>/dev/null  # Sending to dev null because ezGIT may not be installed yet

   #uDev: #bash ezGIT/all/bin/automatic uploader for repos like "omni-log-Dv" that are meant to be ALWAYS in the "cloud" uDev: this script will run at terminal startup and will upload+download a list of file always.
   #uDev: #for messenger-like comunications: download+upload content for a private github repo and after the other mobile phone downloads it, use git to remove it from the git log permanently


   echo -e "      > O comando 'G v all' atualiza todos os repos"
}
   
function f_repository_wikiD {
  alias wikiD="echo 'wikiD will open in a browser (uDev)'; echo ' > To edit the file, use: F wd'"
}

function f_repository_moedaz {
   # Repository: moedaz

   # uDev: Put all files to be open under menuFAV F   
   alias mo="bash ${v_REPOS_CENTER}/moedaz/moedaz.sh" ## Exists inside the file 'source-all-moedaz-files'
   alias todo="bash ${v_REPOS_CENTER}/moedaz/moedaz.sh todo"  # Tambem esta presente em: source-all-moedaz-files
   source ${v_REPOS_CENTER}/moedaz/all/source-all-moedaz-files 2>/dev/null
   source ~/.config/h.h/moedaz/terminal-text-color             2>/dev/null
}

function f_repository_garpho {
   # Repository: garpho
   # Cooking repo

   alias ga="bash ${v_REPOS_CENTER}/garpho/garpho.sh"
}

function f_repository_upK {
   # Repository: upK 
   # --- when `upk` called on the terminal without argument, it will edit "upK-diario-Dv.org" if existent

   source ${v_REPOS_CENTER}/upK/all/source-all-upk-files 2>/dev/null

   # Open with github sync
   alias upk="bash ${v_REPOS_CENTER}/upK/upk.sh"
      alias Upk="upk" # Same as previous alias but with capital letter for fast call at termux startup
      alias UPK="upk" # Same as previous alias but with capital letter for fast call at termux startup

}

function f_repository_upK-diario-Dv {
   # Repository: upK-diario-Dv

   # Open without github sync
      # Note: It is recommended not to open this way since the alias "upk" with no arguments will open this file already git pulling info first and git pushing info afterwards
      alias upk-dv="emacs ${v_REPOS_CENTER}/upK-diario-Dv/dailylog.org" 
}

function f_repository_112-Shiva-Sutras {
   # Repository: 112-Shiva-Sutras

   # Attemple to clear `less` 1st lime alias SS="mkdir -p ~/.tmp; ss all > ~/.tmp/SS; less ~/.tmp/SS | head -n -1 | less --wordwrap" 
   alias Ss="ss all | less"

   #alias SS="mkdir -p ~/.tmp; ss all > ~/.tmp/SS; less ~/.tmp/SS | head -n -1 | less --wordwrap" 
   alias SS="ss all | less"

   alias ss="bash ${v_REPOS_CENTER}/112-Shiva-Sutras/ss.sh"
   alias ss.="vim ${v_REPOS_CENTER}/112-Shiva-Sutras/ss.sh"

   alias exp="vim ${v_REPOS_CENTER}/112-Shiva-Sutras/all/exp112.txt"
   alias links="cd ${v_REPOS_CENTER}/112-Shiva-Sutras/all/internal-docs/ && EM Nithyananda-links-compilation.org; echo 'Shiva Sutras links file edited'" # To temporarily help the developer of this file acessing it
}

function f_repository_yogaBashApp {
   # Repository: yogaBashApp

   alias sadhguru-presence="${v_REPOS_CENTER}/yogaBashApp/sadhguru-presence.sh"
   alias termux-stop="termux-media-player stop"
   alias Y="${v_REPOS_CENTER}/yogaBashApp/yoga.sh"
   source ${v_REPOS_CENTER}/yogaBashApp/all/source-all-yoga-files 2>/dev/null
}

function f_repository_Tesoro {
   alias T="bash ${v_REPOS_CENTER}/Tesoro/tesoro.sh"
}

function f_repository_row-reader {
   # Repository: row-reader

   alias rr="bash ${v_REPOS_CENTER}/row-reader/row-reader.sh"
}

function f_repository_omni-log {
   # Repository: omni-log

   # If windows with graphical interface is available, we will prefer that to the terminal version

   # Using command 'om' to open our file
   function om {
      
      # uDev: use drya-lib-4

      # Defining the name of the file as a variable
         v_dir="${v_REPOS_CENTER}/omni-log/"
         v_file="omni-log.org "
         v_choosen_file="${v_REPOS_CENTER}/omni-log/omni-log.org"

      if [ -f /mnt/c/Program\ Files/Emacs/x86_64/bin/emacs.exe ]; then
         # if .exe is found, open GUI emacs on windows:
            clear
            figlet "omni-log"

            echo "DRYa: Opening file (in GUI windows):"
            echo " > $v_choosen_file"
            echo
            echo "Is file going to sync with github? (No)"; sleep 2

            cd $v_dir && /mnt/c/Program\ Files/Emacs/x86_64/bin/emacs.exe $v_file 
               echo -e "... File closed\n" 
               cd ${v_REPOS_CENTER}/omni-log

      else
         # Otherwise, open emacs in terminal:
            echo "Drya: Opening file (in Terminal Linux):"
            echo " > $v_choosen_file"
            echo
            echo "Is file going to sync with github? (No)"; sleep 2

            emacs $v_choosen_file 
               echo -e "... File closed\n"  
               cd ${v_REPOS_CENTER}/omni-log
      fi
   }
   alias Om="om"  ## Alow capital letters too
   alias OM="om"  ## Alow capital letters too
}

function f_repository_3_sticks_alpha_bravo {
   alias   3s="bash ${v_REPOS_CENTER}/3-sticks-alpha-bravo/3-sticks-AB.sh"
   alias 3sab="bash ${v_REPOS_CENTER}/3-sticks-alpha-bravo/3-sticks-AB.sh"
   alias 3SAB="bash ${v_REPOS_CENTER}/3-sticks-alpha-bravo/3-sticks-AB.sh"
}


function f_repository_jarve {
   alias jarve="bash ${v_REPOS_CENTER}/DRYa/all/bin/jarve-sentinel.sh"
   alias J="bash ${v_REPOS_CENTER}/DRYa/all/bin/jarve-sentinel.sh"
   echo "      > O comando 'jarve', 'J' inicia o sentinela"
   echo
}

function f_internal_drya_files_2_of_2 {
   # Repository: DRYa (internal files - (2/2) )

   # Remove temporary dir created by DRYa's other scripts
      rm -rf ~/.tmp/  

      # nota: Passar tambem para o ficheiro bash_logout
      #       Manter assim a apagar em ambos 
      #       para propositadamente apagar os conteudos da pasta ao
      #       abrir um novo separador de terminal
      #
      #       Para programar scripts temporarios de teste é melhor usar a pasta ~/.code/
      

   # DRYa executable
      alias drya="bash ${v_REPOS_CENTER}/DRYa/drya.sh"
      alias D="bash ${v_REPOS_CENTER}/DRYa/drya.sh"

   # List DRYa work directory
      alias Dd="cd ${v_REPOS_CENTER}/DRYa && ls"
      alias DD="cd ${v_REPOS_CENTER}/DRYa && ls"

   # Fast menu for calculators
      alias clc="bash ${v_REPOS_CENTER}/DRYa/all/bin/ca-lculadoras.sh"

   # To use in scripts (vim $DRYa/all/.../...)
      DRYa="${v_REPOS_CENTER}/DRYa"
   
   # Drya start-up bin files (init-bin)
      # Sourcing all stand-alone scripts
         v_init=${v_REPOS_CENTER}/DRYa/all/bin/init-bin/

         echo                                          >> $v_MSGS
         echo "DRYa: List of scripts found in:"        >> $v_MSGS
         echo " > .../DRYa/all/bin/init-bin/"          >> $v_MSGS
         echo                                          >> $v_MSGS

         for i in $(ls $v_init)
         do
            source $v_init/$i 1>/dev/null && echo " > Sorced $i" >> $v_MSGS
         done

         echo                                          >> $v_MSGS

      # Sourcing a specific list of scripts
         alias master-emacs="${v_REPOS_CENTER}/DRYa/all/bin/master-emacs.sh"

   # Sourcing the temporary local configs for DRYa (if they do not exist, send err: /dev/null)) It can store temporary variables for debugging process of some app
      source ~/.config/h.h/drya/.dryarc 2>/dev/null

   # Sourcing config files stored inside DRYa repo created by other machines running DRYa
      source ${v_REPOS_CENTER}/DRYa/all/var/appended-from-dryarc 2>/dev/null

   # ... Optional: Replace normal Welcome message with `D seiva-up-time`
   #   bash ${v_REPOS_CENTER}/DRYa/drya.sh seiva-up-time

   # Sourcing DRYa's own configs (overlaps other repos, internal drya binaries, etc). Used to test things
      source ${v_REPOS_CENTER}/DRYa/all/etc/config-bash-alias
}

function f_verbose_end_file {
   # Send to drya-messages the info that all the file was loaded

   echo -e "DRYa: file finished loading: $v_title_drya \n" >> $v_MSGS
}

function f_temporary_fx {
   # Temporary fx to use the principle of GOD "Indra". The web of events of life, where the things that are needed, bump constantly into your eyes until you dont need





   function f_startup_async {
      # When ezGIT exists, run async fx:
      # --- Download repository updates
      # --- `disown` makes the process run in a sub-shell

      if [ -d ${v_REPOS_CENTER}/ezGIT ]; then
         # Downloading all
            bash ${v_REPOS_CENTER}/ezGIT/ezGIT.sh v A &>/dev/null && echo "Done"

         # uDev: Se houver commits para upload, entao fazer tambem upload

         # This fx will not send any output, so it will send text to drya-msgs
            echo -e "DRYa: source-all-drya-files: f_startup_async: using ezGIT: git pull all recursivelly finished\n" >> $v_MSGS
      fi
      
      
      
   } 

   f_startup_async &> /dev/null & disown  # Run last fx




   
   # Memorizar os Shiva Sutras (temporario)
      bash ${v_REPOS_CENTER}/112-Shiva-Sutras/ss.sh r
      echo

   # uDev: if drya-mail-box is ready, use it here!  
   #       (drya-mail-box is a directory with files to updoald to github but did not have internet when they were written)
   #
   #       instead of `mpv` to make sounds, use termux-toast-message instead
  

   # Sound effect in the end (`disown` makes the process run in a sub-shell)
      v_test=$(type mpv) &>/dev/null
      
      [[ -n $v_test ]] && mpv --really-quiet $v_snd_2 & disown
}

function f_temporary_fx_2 {
   # Forçar a aprendizagemnde Javascript ou Python ou SQLite
   v_opt=$(shuf -i 1-4 -n 1)

   [[ $v_opt == "1" ]] && node    # Foi criado um alias em 'config-bash-alias'
   [[ $v_opt == "2" ]] && python
   [[ $v_opt == "3" ]] && sqlite3
   [[ $v_opt == "4" ]] && echo "bash" 1>/dev/null
}

function f_traitsID_toDo {
   # Running To Do list
   # Use: It is used when one machine schedules tasks for other machine to run at it's startup

   echo "uDev: Read all traitsID variables, and, if there are toDos, do them" 1>/dev/null

   # uDev: Corrigir `git user.name` destas maquinas:
      #Seiva_MSI_Lenovo_330
      #Seiva_MSI_ASUS_15_OLED
}

function f_backdoor {
   # Uncomment to activate actions you want to perform in other devices when Terminal starts up with DRYa

   # Lista de repos a apagar no startup (incluindo em outros dispositivos)
      # Repo 1
         v_rm="scratch-paper"
         rm -rf ${v_REPOS_CENTER}/$v_rm 2>/dev/null 
}

function f_exec { 
   # Running all functions by sequence

   f_startup_escape_time
   f_test  # Can be deleted
   f_basic_variables
   f_drya_msgs
   f_internal_drya_files_1_of_2
   f_drya_msgs_init     >> $v_MSGS 2>/dev/null
   f_traitsID           
   # uDev: `G cf i` caso o nome definido no `git` seja o pre-definido.
   f_dv_PS1             >> $v_MSGS
   f_drya_msgs_welcome  >> $v_MSGS 2>/dev/null
   #f_termux_welcome
   #f_neofetch

   f_drya_plus  ## Turn verbose output welcome screen ON/OFF. # Re-directing too much output at the welcome screen for the choice of the user either to see it or not
   #f_any_key_b4_open_msgs
   f_config_figlet  # It is a dependency

   # Loading repositories
      f_repository_dWiki   
      f_repository_scratch-paper 
      f_repository_ezGIT   
      f_repository_wikiD
      f_repository_moedaz  
      f_repository_garpho
      f_repository_upK  
      f_repository_upK-diario-Dv 
      f_repository_112-Shiva-Sutras
      f_repository_yogaBashApp
      f_repository_Tesoro
      f_repository_row-reader
      f_repository_omni-log
      f_repository_3_sticks_alpha_bravo

   f_internal_drya_files_2_of_2

      f_repository_jarve  # After loading all configs, ask if user want to run this first script
   f_neofetch

   #f_temporary_fx 
   f_traitsID_toDo
   #f_backdoor  # Uncomment to activate actions you want to perform in other devices when Terminal starts up with DRYa and traitsID

   f_verbose_end_file
   #f_temporary_fx_2
   clear
}
f_exec

