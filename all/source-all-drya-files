#!/bin/bash
# Title: source-all-drya-files
# Description: 1st DRYa file to run. This Initializes all other apps and initiate persistent functions

# drya-messages: | 1. A file like neofetch for DRYa
# > drya -m      | 2. Place in this file all script you need ~/.bashrc to recognize
#                     At ~/.bashrc you should place only ONE line to source this file for DRYa, and this file should source all others
#                | 3. We cannot run this command because variable is not defined yet): echo "file: source-all-drya-files: first line" >> $DRYa_MESSAGES

# drya-plus:     | 1. Instead of printing a lot of text on the Termux welcoke screen, lets hide under the function: drya +
#  > drya +      | 2. It has: DRYa welcome message, termux welcome message (if running on Android). Neofetch. More info

# drya-info      | 1. It's Neofetch-like info retrieved by DRYa
#                | 2. It sets variables too like: 'drya --os' (for operative system)



# uDev: Function f_talk should be sourced here to enable it to be used across the system


function f_drya_plus {
   # In order to uncluter the welcome screen, we use this function
      # Building '$ drya +' command used on the welcome screen
      # uDev: send to drya-info too
      # uDev: send to drya-messages too
      # uDev: set function: drya --os
      # uDev: set environment variable: drya-os to be used by other functions like '$ op'
      

   # Gitting info about the machine
      v_uname=$(uname -a)

   # Filter the info to Detect OS
      if [[ $v_uname =~ "Android" ]]; then 
         echo "DRYa: Running on: Android"

      elif  [[ $v_uname =~ "Microsoft" ]]; then 
         echo "DRYa: Running on: Windows"

      elif [[ $v_uname =~ "raspberrypi" ]]; then 
         # Linux has to be the last one, because it means Windows and Android are not present
         echo "DRYa: Running on: Linux (Raspberry Pi)"

      elif [[ $v_uname =~ "Linux" ]]; then 
         # Linux has to be the last one, because it means Windows and Android are not present
         echo "DRYa: Running on: Linux"

      else
         echo "DRYa: Running on: NOT DETECTED"
      fi 

      # Create a script at DRYa/all/bin/ for drya-neofetch
         # uDev: Create the same for Device: Samsung, TLC, Lenovo, Azus (drya will need a .config for this, and needs the user to answer a script)
         # uDev: Detecte personal/safe device from job/public/unsafe device
         # uDev: Create the same for package manager: apt, pacman, dnf, pkg
         # uDev: Create the same for processor: ARM, 64 Bits, 32 Bits (Raspberry pi?)
         # uDev: Create a binary for each combination: 00101: pacman, lenovo, windows, userX
         # uDev: Create environment variables: drya-env-os; drya-env-me (for command whoami); etc
         # Detect wifi not connected networks due to lack of passaword and chech our list of wifi passwords to see if we can log on it
}





function f_dv_PS1 {
   # Defining the favourite Terminal PS1 variable:

   PS1='\[\e[0;32m\]\w\[\e[0m\] \[\e[0;97m\]\$\[\e[0m\] '
   echo "PS1 defined as per the user Dv"
   # uDev: whenever a mew PS1 variable is defined, send the old one to ~/.config/h.h/drya/...
}
   f_dv_PS1





function f_test_0 {
   alias 000="echo test about sourcing inside functions also wiork"
}
f_test_0


# uDev: also source f_horizontal_line


# ---------------------------------------
# -- Functions above -- Sequence Below 
# ---------------------------------------



# uDev: if doom emacs is installed, export it's PATH


# Repository: DRYa (internal files - part 1)
   # Configuring variable for DRYa messages
      mkdir -p ~/.config/h.h/drya/

      DRYa_MESSAGES="$HOME/.config/h.h/drya/.dryaMessages"
      export DRYa_MESSAGES
      echo -e "# Title: DRYa Messages (verbose output for apps under DRYa)" > ~/.config/h.h/drya/.dryaMessages
      echo -e "# Messages started at: $(date) \n" >> ~/.config/h.h/drya/.dryaMessages

   # Add script drya.sh to PATH variable (try: echo $PATH) 
      export PATH=$PATH:${v_REPOS_CENTER}/DRYa

   # Display info about it at the screen when DRYa is loaded by the terminal

      # Presenting it with figlet (which is a dependency) or just echo it's name:
         bash ${v_REPOS_CENTER}/DRYa/all/bin/init-bin/drya-presentation.sh || echo "DRYa: Don't Repeat Yourself (app)"  # In case figlet or tput are not installed, echo only "DRYa" instead

echo
f_drya_plus

      echo "DRYa: Note"
      echo " > Find verbose output (apps included) at:"
      echo " >   variable: '\$DRYa_MESSAGES' (that stores the file name):"
      echo " >   $DRYa_MESSAGES"
      echo " > You can also send text to: '\$DRYa_MESSAGES' example:"
      echo " >   $ echo \"Example-App: Hi there\" >> \$DRYa_MESSAGES"
      echo " > Read the messages with:"
      echo " >   $ drya msgs"
      echo

# Display the standard welcome termux message
   # uDev: WSL2 also has a welcome message that runs only once a day. Let's capture it too
   # Testing with the command 'uname -o' where the output should be "Android" to see if the termux is the terminal running
   # Also sending the error message to /dev/null in case dWiki repository is not yet downloaded side-by-side with DRYa
   if [ $(uname -o) == "Android" ]; then echo "DRYa: Termux"; cat ${v_REPOS_CENTER}/dWiki/termux/default-welcome-screen-text 2>/dev/null; fi

# Neofetch is not needed... It is just for fun
   neofetch 2>/dev/null

# Dependency: figlet
   # Not every instalation of figlet comes witht the same standard font, lets corret that
   alias figlet="figlet -f standard.flf" # My favourite font is called standard.flf ## CAREFULL, this font may be missing

# Repository: CBorg
   alias C="bash ${v_REPOS_CENTER}/CBorg/CB.sh"

# Repository: dWiki
   alias dwiki="bash ${v_REPOS_CENTER}/dWiki/dwiki.sh"
      alias dw="dwiki"
      
   # App under TODO-apps:
      alias satisfaz="bash ${v_REPOS_CENTER}/dWiki/TODO-apps/satisfaz.sh"
         
# Repository: scratch-paper
   alias Qsend="bash ${v_REPOS_CENTER}/scratch-paper/quick-sender.sh"

# Repository: ezGIT
   # Define a key to call the entire program
      alias G="bash ${v_REPOS_CENTER}/ezGIT/ezGIT.sh"
      # uDev: for some repos, must run a script that searches for updates at terminal startup

   # Load all alternative git alias:
      source ${v_REPOS_CENTER}/ezGIT/all/etc/config-bash-alias 2>/dev/null  # Sendinf to dev null because ezGIT may not be installed yet

   #uDev: #bash ezGIT/all/bin/automatic uploader for repos like "omni-log-Dv" that are meant to be ALWAYS in the "cloud" uDev: this script will run at terminal startup and will upload+download a list of file always.
   #uDev: #for messenger-like comunications: download+upload content for a private github repo and after the other mobile phone downloads it, use git to remove it from the git log permanently
   
# Repository: moedaz
   alias mo="bash ${v_REPOS_CENTER}/moedaz/moedaz.sh" ## Exists inside the file 'source-all-moedaz-files'
   alias todo="bash ${v_REPOS_CENTER}/moedaz/moedaz.sh todo"  # Tambem esta presente em: source-all-moedaz-files
   source ${v_REPOS_CENTER}/moedaz/all/source-all-moedaz-files 2>/dev/null
   source ~/.config/h.h/moedaz/terminal-text-color 2>/dev/null

# Repository: QR-walking-stick (inside dWiki/TODO-apps)
   alias qr="bash ${v_REPOS_CENTER}/dWiki/TODO-apps/QR-walking-stick/store-data-from-QRcodeApp.sh"

# Repository: upK and upK-diario-Dv
   source ${v_REPOS_CENTER}/upK/all/bin/bash/time.sh 2>/dev/null

   # Open with github sync
   alias upk="bash ${v_REPOS_CENTER}/upK/upk.sh"
      alias Upk="upk" # Same as previous alias but with capital letter for fast call at termux startup
      alias UPK="upk" # Same as previous alias but with capital letter for fast call at termux startup

   # Open without github sync
      # Note: It is recommended not to open this way since the alias "upk" with no arguments will open this file already git pulling info first and git pushing info afterwards
      alias upk-dv="bash ${v_REPOS_CENTER}/upK-diario-Dv/upk.sh" 

   # uDev: alias "upk dia"="...upk-diario-Dv"
   # NOTE: reporiory "upk" when called on the terminal without argument, it will call "upK-diario-Dv" if existent

# Repository 112-Shiva-Sutras
   alias ss="bash ${v_REPOS_CENTER}/112-Shiva-Sutras/ss.sh"
   alias SS="ss all | less"
   alias ss.="vim ${v_REPOS_CENTER}/112-Shiva-Sutras/ss.sh"
   alias exp="vim ${v_REPOS_CENTER}/112-Shiva-Sutras/exp112.txt"
   alias links="vim ${v_REPOS_CENTER}/112-Shiva-Sutras/all/internal-docs/links-compilation.txt; echo 'Shiva Sutras links file edited'" # To temporarily help the developer of this file acessing it

# Repository yogaBashApp
   alias sadhguru-presence="${v_REPOS_CENTER}/yogaBashApp/sadhguru-presence.sh"
   alias termux-stop="termux-media-player stop"
   alias shambavi="${v_REPOS_CENTER}/yogaBashApp/shambavi.sh"
   source ${v_REPOS_CENTER}/yogaBashApp/all/source-all-yoga-files 2>/dev/null

# Repository row-reader
   alias rr="bash ${v_REPOS_CENTER}/row-reader/row-reader.sh"

# Repository: omni-log
   # If windows with graphical interface is available, we will prefer that to the terminal version

   # Using command 'log' to open our file
   function log {
      
      # Defining the name of the file as a variable
         v_choosen_file="${v_REPOS_CENTER}/omni-log/multiplex.org "

      if [ -f /mnt/c/Program\ Files/Emacs/x86_64/bin/emacs.exe ]; then
         # if .exe is found, open GUI emacs on windows:
            echo "Opening file (in GUI windows):"
            echo " >  $v_choosen_file"
            echo

            /mnt/c/Program\ Files/Emacs/x86_64/bin/emacs.exe $v_choosen_file 
               echo -e "File closed\n" 

      else
         # Otherwise, open emacs in terminal:
            echo "Opening file (in Terminal Linux):"
            echo " > omni-log/$v_choosen_file"
            echo

            emacs $v_choosen_file 
               echo -e "File closed\n" && f_cr && f_file_closed #\
      fi
   }

# Repository: DRYa (internal files - part 2)
   # Remove temporary dir created by DRYa's other scripts
      rm -rf ~/.tmp/

   # Enable/Disable verbose output for this file:
      # Define the function first:
         function f_verbose_start-1 {
            echo "DRYa: file running: ${DRYa_HEART}" >> $DRYa_MESSAGES
            # echo "Installed at.."
         }

      f_verbose_start-1  ##Comment/Uncomment this line to toggle ON or OFF

   # Sourcing DRYa's own configs
      source ${v_REPOS_CENTER}/DRYa/all/etc/config-bash-alias
      alias ,.="vim ${v_REPOS_CENTER}/DRYa/all/etc/config-bash-alias"
      alias ,..="vim ${v_REPOS_CENTER}/DRYa/all/source-all-drya-files"
      alias ,...="F" # Alias for Menu D.F (files part)

   # DRYa executable
      alias drya="bash ${v_REPOS_CENTER}/DRYa/drya.sh"
   
   # Drya bin files
      # Sourcing all stand-alone scripts
         source ${v_REPOS_CENTER}/DRYa/all/bin/init-bin/*

      # Sourcing a specific list of scripts
         alias master-emacs="${v_REPOS_CENTER}/DRYa/all/bin/master-emacs.sh"

   # Sourcing the temporary/local configs for DRYa (if they ido not exist, send err: /dev/null)) It can store temporary variables for debugging process of some app
      source ~/.config/h.h/drya/.dryarc 2>/dev/null
      source ${v_REPOS_CENTER}/DRYa/all/var/appended-from-dryarc 2>/dev/null

# drya-messages: 
   echo "file: source-all-drya-files: last line" >> $DRYa_MESSAGES



